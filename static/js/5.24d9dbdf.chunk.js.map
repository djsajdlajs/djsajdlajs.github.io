{"version":3,"sources":["models/enums/poolInfoPage.ts","models/enums/farming.ts","models/enums/staking.ts","utils/numbers.ts","shared/components/AutoColumn/index.tsx","utils/time.ts","utils/convertDate.ts","components/Menu/index.tsx","utils/info/index.ts","hooks/subgraph/useInfoSubgraph.ts","components/Table/DataRow.tsx","components/Table/PageButtons.tsx","components/Table/TableBody.tsx","components/Table/index.tsx","components/InfoPools/AprHeader.tsx","hooks/useHandleSort.ts","hooks/useHandleArrow.ts","components/Table/TableHeader.tsx","components/InfoPools/index.tsx","components/InfoPools/PoolRow.tsx","components/Percent/index.tsx","components/Text/index.tsx","components/InfoTokens/index.tsx","components/InfoTokens/TokenRow.tsx","utils/hexToRgba.ts","utils/getPositionTokensRange.ts","components/FeeChartRangeInput/Chart.tsx","components/FeeChartRangeInput/index.tsx","components/PoolInfoChartToolbar/PoolInfoChartToolbar.tsx","pages/PoolInfoPage/PoolInfoHeader.tsx","components/LiquidityBarChart/BarChart.tsx","components/LiquidityBarChart/index.tsx","components/InfoTotalStats/StatCard.tsx","components/InfoTotalStats/index.tsx","pages/PoolInfoPage/index.tsx","hooks/useInfoPoolChart.ts","hooks/subgraph/useInfoTickData.ts","pages/InfoPage/index.tsx"],"names":["ChartType","ChartSpan","ChartToken","FarmingType","chartTypes","formatDollarAmount","num","digits","round","numbro","formatCurrency","average","mantissa","abbreviations","thousand","million","billion","formatPercent","parseFloat","toString","toFixed","formatAmountTokens","format","thousandSeparated","AutoColumn","children","gap","justify","className","convertDateTime","date","h","getHours","m","getMinutes","hChars","split","mChars","convertLocalDate","month","getMonth","day","getDate","Menu","items","classes","refreshHandler","isLoading","size","map","el","i","to","link","activeClassName","icon","title","marked","undefined","disabled","onClick","style","display","stroke","WETH_ADDRESSES","get2DayChange","valueNow","value24HoursAgo","value48HoursAgo","currentChange","previousChange","adjustedPercentChange","isNaN","isFinite","getPercentChange","change","formatTokenSymbol","address","symbol","includes","formatTokenName","name","parsePoolsData","tokenData","reduce","accum","poolData","id","parseTokensData","useInfoSubgraph","chainId","useActiveWeb3React","useClients","dataClient","farmingClient","useDeltaTimestamps","t24","t48","tWeek","useBlocksFromTimestamps","blocks","blockError","error","sort","a","b","timestamp","block24","block48","blockWeek","ethPrices","useEthPrices","useState","poolsResult","setPools","poolsLoading","setPoolsLoading","tokensResult","setTokens","tokensLoading","setTokensLoading","feesResult","setFees","feesLoading","setFeesLoading","chartPoolData","setChartPoolData","chartPoolDataLoading","setChartPoolDataLoading","totalStats","setTotalStats","totalStatsLoading","setTotalStatsLoading","closed","opened","addressForCheck","AlgebraConfig","DEFAULT_TOKEN_LIST","ChainId","BNB","filterForScamTokens","tokensForCheck","possibleNames","possibleFakeNames","query","TOP_POOLS","fetchPolicy","topPools","data","pools","_poolsAddresses","POOLS_FROM_ADDRESSES","rawPools","filter","pool","token0","token0Symbol","token0Name","token0Id","token1","token1Symbol","token1Name","token1Id","toUpperCase","some","names","toLowerCase","poolsAddresses","_block24","_block48","_blockWeek","fetchPoolsByTime","number","pools24","pools48","poolsWeek","parsedPools","parsedPools24","parsedPools48","parsedPoolsWeek","fetchPoolsAPR","aprs","fetchEternalFarmAPR","farmAprs","fetchEternalFarmingsAPRByPool","farmingAprs","_farmingAprs","acc","formatted","current","oneDay","twoDay","week","manageUntrackedVolume","volumeUSD","manageUntrackedTVL","totalValueLockedUSD","volumeUSDChange","volumeUSDWeek","volumeUSDMonth","txCount","feesCollected","feesUSD","tvlUSD","tvlUSDChange","aprPercent","farmingApr","fee","exists","apr","Object","values","console","Error","TOP_TOKENS","topTokens","tokens","_tokenAddresses","TOKENS_FROM_ADDRESSES","rawTokens","token","tokenAddresses","fetchTokensByTime","tokens24","tokens48","parsedTokens","parsedTokens24","parsedTokens48","tvlToken","priceUSD","derivedMatic","priceUSDOneDay","priceUSDChange","blockNumber","message","fetchLastEntry","CHART_FEE_LAST_ENTRY","variables","feeHourDatas","fetchLastNotEmptyEntry","CHART_FEE_LAST_NOT_EMPTY","Number","length","fetchPoolLastNotEmptyEntry","CHART_POOL_LAST_NOT_EMPTY","poolHourDatas","fetchPoolLastEntry","CHART_POOL_LAST_ENTRY","startTimestamp","endTimestamp","CHART_FEE_POOL_DATA","_feeHourData","previousData","CHART_POOL_DATA","_poolHourDatas","periodStartUnix","TOTAL_STATS","data24","stats","factories","stats24","totalVolumeUSD","totalFeesUSD","poolAddresses","FETCH_ETERNAL_FARM_FROM_POOL","eternalFarmings","blocksFetched","fetchInfoPools","fetchInfoPoolsFn","fetchInfoTokens","fetchInfoTokensFn","fetchChartFeesData","fetchFeePoolFn","fetchChartPoolData","fetchChartPoolDataFn","fetchTotalStats","fetchTotalStatsFn","DataRow","grid","header","rowId","props","PageButtons","page","maxPage","setPage","body","TableBody","maxItems","sortField","sortIndex","sortDirection","gridClass","setMaxPage","useEffect","extraPages","Math","floor","sortedPools","useMemo","Array","isArray","value","slice","Table","Apr","marginLeft","color","useHandleSort","setSortDirection","setSortField","setSortIndex","useCallback","newField","newIndex","useHandleArrow","field","TableHeader","handleSort","sortFields","arrow","InfoPools","fetchHandler","_data","_poolTitle","currency0","Token","CHAIN_PARAMS","currency1","href","blockExplorerURL","rel","target","label","ml","feeTierPercent","Pool","farming","overflow","Loader","Wrapper","styled","TYPE","main","fontSize","fontWeight","negative","Percent","decimals","wrap","simple","rest","truncated","neutral","abs","Label","end","theme","mediaWidth","upToExtraSmall","upToSmall","InfoTokens","CurrencyLogo","currency","Row","HoverInlineText","text","maxCharacters","TokenRow","hexToRgbA","hex","opacity","c","test","substring","join","getPositionTokensSortRange","token0Range","token1Range","Chart","feeData","span","type","dimensions","isMobile","positions","selected","svgRef","useRef","width","height","margin","svgWidth","left","right","svgHeight","bottom","top","firstLoad","setFirstLoad","prevSelected","usePreviousNonEmptyArray","prevToken","usePrevious","firstNonEmptyValue","xTicks","DAY","MONTH","WEEK","tickWidth","_chartData","_span","sameDays","res","dayjs","isSame","push","startOf","prev","cur","FEES","VOLUME","PRICE","max","Date","concat","unix","firstRealDay","lastRealDay","firstAdditionalDay","now","subtract","lastAdditionalDay","last","difference","diff","j","nextDay","add","xScale","scaleTime","domain","min","d","range","yScale","scaleLinear","OutOfChartTooltipGroup","create","OutOfChartTooltipRect","attr","OutOfChartTooltipChevron","OutOfChartTooltipText","append","node","priceRects","halfOfHeight","outRangeIndex","outTimeIndex","outRangeIds","outTimeIds","setTooltipPricePositions","height0","height1","y","rect","positionNumber","clonedRect","select","clone","clonedChevron","clonedGroup","clonedText","property","div","document","createElement","position","visibility","innerHTML","appendChild","offsetWidth","removeChild","stc","marginTop","findIndex","dataset","previous","outsideIdx","splice","key","item","pos","_token0Range","_token1Range","token1Height","token0Height","outOfChart","TOKEN1","TOKEN0","timestamps","posWidth","posX","posY","startTime","endTime","widthDif","posHeight","pricesRangesGroup","Line","LineHorizontal","InfoRectGroup","InfoRect","InfoRectFeeText","DateRectGroup","DateRect","DateRectText","MaxPriceRectGroup","MaxPriceRect","MaxPriceRectText","MinPriceRectGroup","MinPriceRect","MinPriceRectText","Focus","svgEl","selectAll","remove","isEntered","svg","on","xAxisGroup","call","axisBottom","ticks","tickSizeOuter","yAxisGroup","axisLeft","tickFormat","val","tickSize","offset","enter","linePath","datum","line","curve","curveBumpX","x","areaPath","area","y0","y1","transition","delay","duration","ease","easeCircleOut","attrTween","this","getTotalLength","interpolate","every","nodes","xTranslate","match","hoverHandle","clientX","clientY","callback","wait","timeout","e","setTimeout","throttle","_value","textWidth","getBoundingClientRect","dateTextWidth","closestRect","minS","MAX_SAFE_INTEGER","S","tagName","_maxValue","attributes","maxTextWidth","baseVal","_minValue","minTextWidth","setAttribute","forEach","arr","ref","FeeChartRangeInput","fetchedData","refreshing","setToken","setSelected","account","formattedData","isUntracked","untrackedVolumeUSD","TVL","changesCount","Toggle","isActive","toggle","checked","unchecked","isTablet","PoolInfoChartToolbar","chartSpans","setType","setSpan","zoom","handleZoomIn","handleZoomOut","LIQUIDITY","PoolInfoHeader","collectedFees","poolTitle","BarChart","activeTickIdx","activeTickIdxInRange","v","index","xDomain","Set","price0","yDomain","activeLiquidity","scaleBand","InfoRectPrice0","InfoRectPrice1","InfoRectPriceLocked","InfoCurrentCircle","bandwidth","isCurrent","isOverflowing","isLower0","isLower1","price1","isLowerTVL","tvlToken0","LiquidityBarChart","MAX_UINT128","BigNumber","from","pow","sub","processedData","setProcessedData","formattedAddress0","isAddress","formattedAddress1","_token0","_token1","Promise","all","ticksProcessed","t","active","tickIdx","sqrtPriceX96","TickMath","getSqrtRatioAtTick","mockTicks","liquidityGross","liquidityNet","JSBI","multiply","BigInt","liquidityActive","nextSqrtX96","maxAmountToken0","CurrencyAmount","fromRawAmount","getOutputAmount","outputRes0","token1Amount","amount0","toExact","amount1","tvlToken1","processTicks","middle","chunkLength","idx","StatCard","Card","isDark","InfoTotalStats","poolsStat","pathname","useLocation","PoolInfoPage","params","poolLoading","setPoolLoading","poolResult","setPoolResult","poolId","FETCH_POOL","fetchPool","fetchPoolFn","useInfoPoolChart","numSurroundingTicks","ticksResult","setTicksResult","ticksLoading","setTicksLoading","fetchInitializedTicks","poolAddress","tickIdxLowerBound","tickIdxUpperBound","surroundingTicks","surroundingTicksResult","skip","FETCH_TICKS","loading","Boolean","poolCurrentTick","tick","liquidity","token0Address","token0Decimals","token1Address","token1Decimals","poolCurrentTickIdx","parseInt","tickSpacing","initializedTicksResult","initializedTicks","tickIdxToInitializedTick","keyBy","activeTickIdxForPrice","MIN_TICK","MAX_TICK","activeTickProcessed","tickToPrice","activeTick","Direction","computeSurroundingTicks","direction","previousTickProcessed","processedTicks","currentTickIdx","ASC","currentTickProcessed","currentInitializedTick","DESC","notEqual","reverse","subsequentTicks","previousTicks","fetchTicksSurroundingPrice","fetchTicksSurroundingPriceFn","useInfoTickData","hour","getTime","useToken","setZoom","untrackedFeesUSD","InfoPage","path","useRouteMatch","infoMenuList","reload","window","location","_window","ethereum","removeListener","Helmet","exact","render"],"mappings":"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","file":"static/js/5.24d9dbdf.chunk.js","sourcesContent":["export enum ChartType {\n    VOLUME,\n    TVL,\n    FEES,\n    LIQUIDITY,\n    PRICE\n}\n\nexport enum ChartSpan {\n    DAY,\n    WEEK,\n    MONTH,\n}\n\nexport enum ChartToken {\n    TOKEN0,\n    TOKEN1\n}\n","export enum FarmingType {\n    ETERNAL = 0,\n    LIMIT = 1\n}\n","export enum chartTypes {\n    APR = 'apr',\n    ALGB_BALANCE = 'ALGBbalance',\n    CURRENCY_STAKED_AMOUNT = 'currentStakedAmount',\n    XALGB_TOTAL_SUPPLY = 'xALGBtotalSupply',\n    ALGB_FROM_VAULT = 'ALGBfromVault',\n    XALGB_MINTED ='xALGBminted'\n}\n","import numbro from 'numbro'\n\n// using a currency library here in case we want to add more in future\nexport const formatDollarAmount = (num: number | undefined, digits = 2, round = true) => {\n    if (num === 0) return '$0.00'\n    if (!num) return '-'\n    if (num < 0.001 && digits <= 3) {\n        return '<$0.001'\n    }\n\n    return numbro(num).formatCurrency({\n        average: round,\n        mantissa: num > 1000 ? 2 : digits,\n        abbreviations: {\n            thousand: 'K',\n            million: 'M',\n            billion: 'B'\n        }\n    })\n}\n\n// using a currency library here in case we want to add more in future\n\nexport const formatPercent = (num: number | undefined, digits = 2, round = true) => {\n    if (num === 0) return '-'\n    if (!num) return '-'\n    if (num < 0.001 && digits <= 3) {\n        return '<0.01%'\n    }\n\n    return parseFloat(num.toString()).toFixed(2) + '%'\n}\n\nexport const formatAmount = (num: number | undefined, digits = 3) => {\n    if (num === 0) return '0'\n    if (!num) return '-'\n    if (num < 0.001) {\n        return '<0.001'\n    }\n    return numbro(num).format({\n        average: true,\n        mantissa: num > 1000 ? 2 : digits,\n        abbreviations: {\n            thousand: 'K',\n            million: 'M',\n            billion: 'B'\n        }\n    })\n}\n\n\nexport const formatAmountTokens = (num: number | undefined, average?: any) => {\n    if (num === 0) return '0'\n    if (!num) return '-'\n    if (num < 0.001) {\n        return '<0.001'\n    }\n    return numbro(num).format({\n        thousandSeparated: true,\n        average: !!average,\n        mantissa: average ? 1 : 0,\n        abbreviations: {\n            thousand: 'K',\n            billion: 'B',\n        }\n    })\n}\n","import React from \"react\";\nimport \"./index.scss\";\n\ninterface AutoColumnProps {\n    children?: any;\n    gap?: \"0\" | \"1\" | \"2\" | \"3\";\n    justify?: \"stretch\" | \"center\" | \"start\" | \"end\" | \"flex-start\" | \"flex-end\" | \"space-between\";\n}\n\nconst AutoColumn = ({ children, gap, justify }: AutoColumnProps) => {\n    return <div className={`auto-column-wrapper ${gap && `rg-${gap}`}`}>{children}</div>;\n};\n\nexport default AutoColumn;\n","import { t } from '@lingui/macro'\n\nexport function getCountdownTime(time: number, now: number) {\n    const timestamp = (time * 1000 - now) / 1000\n    const days = Math.floor(timestamp / (24 * 60 * 60))\n    const hours = Math.floor(timestamp / (60 * 60)) % 24\n    const minutes = Math.floor(timestamp / 60) % 60\n    const seconds = Math.floor(timestamp) % 60\n\n    function format(digit: number) {\n        return digit < 10 ? `0${digit}` : digit\n    }\n\n    const date = t`d`\n\n    return `${days > 0 ? `${days}${date} ` : ''}${format(hours)}:${format(minutes)}:${format(seconds)}`\n}\n\nexport function convertDateTime(date: Date) {\n    const h = date.getHours().toString()\n    const m = date.getMinutes().toString()\n\n    const hChars = h.split('')\n    const mChars = m.split('')\n\n    return (hChars[1] ? h : '0' + hChars[0]) + ':' + (mChars[1] ? m : '0' + mChars[0])\n}\n\nexport function getPositionPeriod(start: string, end?: string): string {\n    const date = new Date(+start * 1000)\n    const sm = date.toLocaleString('default', {month: 'short'})\n    const sd = date.getDate()\n\n    if (end) {\n        const endDate = new Date(+end * 1000)\n        const em = endDate.toLocaleString('default', {month: 'short'})\n        const ed = endDate.getDate()\n        return `${sm} ${sd} - ${em} ${ed}`\n    }\n    return `${sm} ${sd}`\n}\n","import { t } from \"@lingui/macro\"\n\nexport function convertDate(date: Date) {\n    const yyyy = date.getUTCFullYear().toString()\n    const mm = (date.getUTCMonth() + 1).toString()\n    const dd = date.getUTCDate().toString()\n    const mmChars = mm.split('')\n    const ddChars = dd.split('')\n\n    return yyyy + '-' + (mmChars[1] ? mm : '0' + mmChars[0]) + '-' + (ddChars[1] ? dd : '0' + ddChars[0])\n}\n\nexport function convertLocalDate(date: Date) {\n\n    const months = [\n        t`January`,\n        t`February`,\n        t`March`,\n        t`April`,\n        t`May`,\n        t`June`,\n        t`July`,\n        t`August`,\n        t`September`,\n        t`October`,\n         t`November`,\n         t`December`\n    ]\n\n    const month = months[date.getMonth()]\n    const day = date.getDate().toString()\n\n    return `${month} ${day}`\n}\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./index.scss\";\nimport { RefreshCw } from \"react-feather\";\n\ninterface MenuProps {\n    items: {\n        title: string;\n        icon: JSX.Element;\n        link: string;\n        marked?: boolean;\n    }[];\n    classes?: string;\n    refreshHandler: any;\n    isLoading: any;\n    size: string | number;\n}\n\nconst Menu = ({ items, classes, refreshHandler, isLoading, size }: MenuProps) => {\n    return (\n        <div className={`menu-wrapper w-100 flex-s-between b ${classes}`}>\n            <ul className={`menu-list`}>\n                {items.map((el, i) => (\n                    <NavLink key={i} to={el.link} className={\"menu-list-item ph-1\"} activeClassName={\"menu-list-item--active\"}>\n                        {el.icon}\n                        {el.title}\n                        {el.marked ? <span className={\"menu-list-item__circle\"}></span> : null}\n                    </NavLink>\n                ))}\n            </ul>\n            {refreshHandler && isLoading !== undefined && (\n                <span className={\"ml-a pb-1 ph-1\"}>\n                    <button className={\"menu-list-refresh hover-op trans-op\"} disabled={isLoading} onClick={() => refreshHandler()} data-refreshing={isLoading}>\n                        <RefreshCw style={{ display: \"block\" }} size={size} stroke={\"var(--icon)\"} />\n                    </button>\n                </span>\n            )}\n        </div>\n    );\n};\n\nexport default Menu;\n","import { Token } from '@uniswap/sdk-core'\n\nconst WETH_ADDRESSES = ['0xb7ddc6414bf4f5515b52d8bdd69973ae205ff101']\n\n/**\n * gets the amount difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */\nexport const get2DayChange = (valueNow: string, value24HoursAgo: string, value48HoursAgo: string): [number, number] => {\n    // get volume info for both 24 hour periods\n    const currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo)\n    const previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo)\n    const adjustedPercentChange = ((currentChange - previousChange) / previousChange) * 100\n    if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n        return [currentChange, 0]\n    }\n    return [currentChange, adjustedPercentChange]\n}\n\n/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */\nexport const getPercentChange = (valueNow: string | undefined, value24HoursAgo: string | undefined): number => {\n    if (valueNow && value24HoursAgo) {\n        const change = ((parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo)) * 100\n        if (isFinite(change)) return change\n    }\n    return 0\n}\n\nexport interface SerializedToken {\n    chainId: number\n    address: string\n    decimals: number\n    symbol?: string\n    name?: string\n}\n\nexport function serializeToken(token: Token): SerializedToken {\n    return {\n        chainId: token.chainId,\n        address: token.address,\n        decimals: token.decimals,\n        symbol: token.symbol,\n        name: token.name\n    }\n}\n\nexport function deserializeToken(serializedToken: SerializedToken): Token {\n    return new Token(\n        serializedToken.chainId,\n        serializedToken.address,\n        serializedToken.decimals,\n        serializedToken.symbol,\n        serializedToken.name\n    )\n}\n\nexport function formatTokenSymbol(address: string, symbol: string) {\n    if (WETH_ADDRESSES.includes(address)) {\n        return 'WETH'\n    }\n    return symbol\n}\n\nexport function formatTokenName(address: string, name: string) {\n    if (WETH_ADDRESSES.includes(address)) {\n        return 'WETH'\n    }\n    return name\n}\n","import { useState } from 'react'\nimport { useActiveWeb3React } from '../web3'\nimport { useClients } from './useClients'\nimport {\n    CHART_FEE_LAST_ENTRY,\n    CHART_FEE_LAST_NOT_EMPTY,\n    CHART_FEE_POOL_DATA,\n    CHART_POOL_DATA,\n    CHART_POOL_LAST_ENTRY,\n    CHART_POOL_LAST_NOT_EMPTY,\n    FETCH_ETERNAL_FARM_FROM_POOL,\n    POOLS_FROM_ADDRESSES,\n    TOKENS_FROM_ADDRESSES,\n    TOP_POOLS,\n    TOP_TOKENS,\n    TOTAL_STATS\n} from 'utils/graphql-queries'\nimport { useBlocksFromTimestamps } from '../blocks'\nimport { useEthPrices } from '../useEthPrices'\nimport { useDeltaTimestamps } from 'utils/queries'\nimport { formatTokenName, formatTokenSymbol, get2DayChange, getPercentChange } from 'utils/info'\nimport {\n    FactorySubgraph,\n    FeeSubgraph,\n    FormattedChartPool,\n    FormattedFee,\n    FormattedPool,\n    FormattedToken,\n    FormattedTotalStats,\n    HistoryStakingSubgraph,\n    LastPoolSubgraph,\n    PoolAddressSubgraph,\n    PoolSubgraph,\n    PriceRangeChart,\n    StakeSubgraph,\n    SubgraphResponse,\n    SubgraphResponseStaking,\n    TokenAddressSubgraph,\n    TokenInSubgraph,\n    TotalStatSubgraph, PositionPriceRange, EternalFarmingByPool\n} from '../../models/interfaces'\nimport { fetchEternalFarmAPR, fetchPoolsAPR } from \"utils/api\"\n\nimport AlgebraConfig from \"algebra.config\"\nimport { ChainId } from \"constants/addresses\"\n\nfunction parsePoolsData(tokenData: PoolSubgraph[] | string) {\n    if (typeof tokenData === 'string') return {}\n    return tokenData ? tokenData.reduce((accum: { [address: string]: PoolSubgraph }, poolData) => {\n        accum[poolData.id] = poolData\n        return accum\n    }, {})\n        : {}\n}\n\nfunction parseTokensData(tokenData: TokenInSubgraph[] | string) {\n    if (typeof tokenData === 'string') return {}\n    return tokenData ? tokenData.reduce((accum: { [address: string]: TokenInSubgraph }, tokenData) => {\n        accum[tokenData.id] = tokenData\n        return accum\n    }, {})\n        : {}\n}\n\nexport function useInfoSubgraph() {\n    const { chainId } = useActiveWeb3React()\n    const { dataClient, farmingClient } = useClients()\n    const [t24, t48, tWeek] = useDeltaTimestamps()\n\n    const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48, tWeek])\n    const [block24, block48, blockWeek] = blocks?.sort((a, b) => +b.timestamp - +a.timestamp) ?? []\n\n    const ethPrices = useEthPrices()\n\n    const [poolsResult, setPools] = useState<string | null | FormattedPool[]>(null)\n    const [poolsLoading, setPoolsLoading] = useState<boolean>(false)\n\n    const [tokensResult, setTokens] = useState<string | null | FormattedToken[]>(null)\n    const [tokensLoading, setTokensLoading] = useState<boolean>(false)\n\n    const [feesResult, setFees] = useState<null | string | FormattedFee>(null)\n    const [feesLoading, setFeesLoading] = useState<boolean>(false)\n\n    const [chartPoolData, setChartPoolData] = useState<null | string | FormattedChartPool>(null)\n    const [chartPoolDataLoading, setChartPoolDataLoading] = useState<boolean>(false)\n\n    const [totalStats, setTotalStats] = useState<null | string | FormattedTotalStats>(null)\n    const [totalStatsLoading, setTotalStatsLoading] = useState<boolean>(true)\n\n    const [stakesResult, setStakes] = useState<null | string | SubgraphResponseStaking<FactorySubgraph[], StakeSubgraph[]>>(null)\n    const [stakesLoading, setStakesLoading] = useState<boolean>(false)\n\n    const [stakeHistoriesResult, setHistories] = useState<null | HistoryStakingSubgraph[] | string>(null)\n    const [historiesLoading, setHistoriesLoading] = useState<boolean>(false)\n\n    const [positionsRange, setPositionsRange] = useState<{ closed: PriceRangeChart | null, opened: PriceRangeChart | null }>({ closed: null, opened: null })\n\n    const addressForCheck = AlgebraConfig.DEFAULT_TOKEN_LIST[chainId || ChainId.BNB].filterForScamTokens.tokensForCheck\n\n    const possibleNames = AlgebraConfig.DEFAULT_TOKEN_LIST[chainId || ChainId.BNB].filterForScamTokens.possibleFakeNames\n\n    async function fetchInfoPools() {\n\n        if (!blocks || blockError || !ethPrices) return\n\n        try {\n            setPoolsLoading(true)\n\n            const { data: { pools: topPools }, error } = (await dataClient.query<SubgraphResponse<PoolAddressSubgraph[]>>({\n                query: TOP_POOLS,\n                fetchPolicy: 'network-only'\n            }))\n\n            if (error) {\n                setPools(`failed`)\n                return\n            }\n\n            const _poolsAddresses = topPools.map(el => el.id)\n\n            const { data: { pools: rawPools }, error: _error2 } = await dataClient.query<SubgraphResponse<PoolSubgraph[]>>({\n                query: POOLS_FROM_ADDRESSES(undefined, _poolsAddresses),\n                fetchPolicy: 'network-only'\n            })\n\n            if (_error2) {\n                setPools(`failed`)\n                return\n            }\n\n            const pools = rawPools.filter(pool => {\n\n                const { symbol: token0Symbol, name: token0Name, id: token0Id } = pool.token0\n                const { symbol: token1Symbol, name: token1Name, id: token1Id } = pool.token1\n\n                if ((token0Symbol.toUpperCase() in addressForCheck) || possibleNames.some(el => el.names.includes(token0Name))) {\n                    return token0Id.toLowerCase() === addressForCheck[token0Symbol.toUpperCase()]\n                }\n\n                if ((token1Symbol.toUpperCase() in addressForCheck) || possibleNames.some(el => el.names.includes(token1Name))) {\n                    return token1Id.toLowerCase() === addressForCheck[token1Symbol.toUpperCase()]\n                }\n\n                return true\n\n            })\n\n            const poolsAddresses = pools.map(pool => pool.id)\n\n            const [_block24, _block48, _blockWeek] = [block24, block48, blockWeek].sort((a, b) => +b.timestamp - +a.timestamp)\n\n            const pools24 = await fetchPoolsByTime(_block24.number, poolsAddresses)\n            const pools48 = await fetchPoolsByTime(_block48.number, poolsAddresses)\n            const poolsWeek = await fetchPoolsByTime(_blockWeek.number, poolsAddresses)\n            // const poolsMonth = await fetchPoolsByTime(_blockMonth.number, poolsAddresses)\n\n            const parsedPools = parsePoolsData(pools)\n            const parsedPools24 = parsePoolsData(pools24)\n            const parsedPools48 = parsePoolsData(pools48)\n            const parsedPoolsWeek = parsePoolsData(poolsWeek)\n            // const parsedPoolsMonth = parsePoolsData(poolsMonth)\n\n            const aprs = await fetchPoolsAPR(chainId || ChainId.BNB)\n\n            const farmAprs = await fetchEternalFarmAPR(chainId || ChainId.BNB)\n\n            const farmingAprs = await fetchEternalFarmingsAPRByPool(poolsAddresses)\n            const _farmingAprs: { [type: string]: number } = farmingAprs.reduce((acc, el) => (\n                {\n                    ...acc,\n                    [el.pool]: farmAprs[el.id]\n                }\n            ), {})\n\n            const formatted = poolsAddresses.reduce((accum: { [address: string]: FormattedPool | any }, address) => {\n                const current: PoolSubgraph | undefined = parsedPools[address]\n                const oneDay: PoolSubgraph | undefined = parsedPools24[address]\n                const twoDay: PoolSubgraph | undefined = parsedPools48[address]\n                const week: PoolSubgraph | undefined = parsedPoolsWeek[address]\n                // const month: PoolSubgraph | undefined = parsedPoolsMonth[address]\n\n                const manageUntrackedVolume = +current.volumeUSD <= 1 ? 'volumeUSD' : 'volumeUSD'\n                const manageUntrackedTVL = +current.totalValueLockedUSD <= 1 ? 'totalValueLockedUSD' : 'totalValueLockedUSD'\n\n                const [volumeUSD, volumeUSDChange] =\n                    current && oneDay && twoDay\n                        ? get2DayChange(current[manageUntrackedVolume], oneDay[manageUntrackedVolume], twoDay[manageUntrackedVolume])\n                        : current && oneDay ?\n                            [parseFloat(current[manageUntrackedVolume]) - parseFloat(oneDay[manageUntrackedVolume]), 0] : current\n                                ? [parseFloat(current[manageUntrackedVolume]), 0]\n                                : [0, 0]\n\n                const volumeUSDWeek = current && week ? parseFloat(current[manageUntrackedVolume]) - parseFloat(week[manageUntrackedVolume])\n                    : current ? parseFloat(current[manageUntrackedVolume]) : 0\n\n                // const volumeUSDMonth = current && month ? parseFloat(current[manageUntrackedVolume]) - parseFloat(month[manageUntrackedVolume])\n                //     : current ? parseFloat(current[manageUntrackedVolume]) : 0\n                const volumeUSDMonth = current ? parseFloat(current[manageUntrackedVolume]) : 0\n\n                const txCount = current && oneDay\n                    ? parseFloat(current.txCount) - parseFloat(oneDay.txCount)\n                    : current\n                        ? parseFloat(current.txCount)\n                        : 0\n\n                const feesCollected = current && oneDay ? parseFloat(current.feesUSD) - parseFloat(oneDay.feesUSD) : current ? parseFloat(current.feesUSD) : 0\n\n                const tvlUSD = current ? parseFloat(current[manageUntrackedTVL]) : 0\n                const tvlUSDChange = getPercentChange(current ? current[manageUntrackedTVL] : undefined, oneDay ? oneDay[manageUntrackedTVL] : undefined)\n                const aprPercent = aprs[address] ? aprs[address].toFixed(2) : 0\n                const farmingApr = _farmingAprs[address] ? +_farmingAprs[address].toFixed(2) : 0\n\n                accum[address] = {\n                    token0: current.token0,\n                    token1: current.token1,\n                    fee: current.fee,\n                    exists: !!current,\n                    address,\n                    volumeUSD,\n                    volumeUSDChange,\n                    volumeUSDWeek,\n                    volumeUSDMonth,\n                    tvlUSD,\n                    txCount,\n                    tvlUSDChange,\n                    apr: aprPercent,\n                    farmingApr,\n                    feesCollected\n                }\n                return accum\n            }, {})\n\n            setPools(Object.values(formatted))\n\n        } catch (err) {\n            console.error('ERROR', err)\n            setPools('failed')\n            throw new Error('Info pools fetch ' + err)\n        } finally {\n            setPoolsLoading(false)\n        }\n    }\n\n    async function fetchInfoTokens() {\n\n        if (!blocks || blockError || !ethPrices) return\n\n        try {\n            setTokensLoading(true)\n\n            const { data: { tokens: topTokens }, error } = (await dataClient.query<SubgraphResponse<TokenAddressSubgraph[]>>({\n                query: TOP_TOKENS,\n                fetchPolicy: 'network-only'\n            }))\n\n            if (error) {\n                setTokens('failed')\n                return\n            }\n\n            const _tokenAddresses: string[] = topTokens.map(el => el.id)\n\n            const { data: { tokens: rawTokens }, error: _error } = await dataClient.query<SubgraphResponse<TokenInSubgraph[]>>({\n                query: TOKENS_FROM_ADDRESSES(undefined, _tokenAddresses),\n                fetchPolicy: 'network-only'\n            })\n\n            if (_error) {\n                setTokens('failed')\n                return\n            }\n\n            const tokens = rawTokens.filter(token => {\n\n                if ((token.symbol.toUpperCase() in addressForCheck) || possibleNames.some(el => el.names.includes(token.name))) {\n                    return token.id.toLowerCase() === addressForCheck[token.symbol.toUpperCase()]\n                }\n\n                return true\n\n            })\n\n            const tokenAddresses = tokens.map(token => token.id)\n\n            const [_block24, _block48] = [block24, block48].sort((a, b) => +b.timestamp - +a.timestamp)\n\n            const tokens24 = await fetchTokensByTime(_block24.number, tokenAddresses)\n            const tokens48 = await fetchTokensByTime(_block48.number, tokenAddresses)\n            // const tokensWeek = await fetchTokensByTime(_blockWeek.number, tokenAddresses)\n\n            const parsedTokens = parseTokensData(tokens)\n            const parsedTokens24 = parseTokensData(tokens24)\n            const parsedTokens48 = parseTokensData(tokens48)\n            // const parsedTokensWeek = parseTokensData(tokensWeek)\n\n            const formatted = tokenAddresses.reduce((accum: { [address: string]: FormattedToken | any }, address) => {\n                const current: TokenInSubgraph | undefined = parsedTokens[address]\n                const oneDay: TokenInSubgraph | undefined = parsedTokens24[address]\n                const twoDay: TokenInSubgraph | undefined = parsedTokens48[address]\n                // const week: TokenInSubgraph | undefined = parsedTokensWeek[address]\n\n                const manageUntrackedVolume = +current.volumeUSD <= 1 ? 'volumeUSD' : 'volumeUSD'\n                const manageUntrackedTVL = +current.totalValueLockedUSD <= 1 ? 'totalValueLockedUSD' : 'totalValueLockedUSD'\n\n                const [volumeUSD, volumeUSDChange] =\n                    current && oneDay && twoDay\n                        ? get2DayChange(current[manageUntrackedVolume], oneDay[manageUntrackedVolume], twoDay[manageUntrackedVolume])\n                        : current\n                            ? [parseFloat(current[manageUntrackedVolume]), 0]\n                            : [0, 0]\n\n                // const volumeUSDWeek = current && week ? parseFloat(current[manageUntrackedVolume]) - parseFloat(week[manageUntrackedVolume]) : current ? parseFloat(current[manageUntrackedVolume]) : 0\n                const volumeUSDWeek = current ? parseFloat(current[manageUntrackedVolume]) : 0\n                const tvlUSD = current ? parseFloat(current[manageUntrackedTVL]) : 0\n                const tvlUSDChange = getPercentChange(current ? current[manageUntrackedTVL] : undefined, oneDay ? oneDay[manageUntrackedTVL] : undefined)\n                const tvlToken = current ? parseFloat(current[manageUntrackedTVL]) : 0\n                const priceUSD = current ? parseFloat(current.derivedMatic) * ethPrices!.current : 0\n                const priceUSDOneDay = oneDay ? parseFloat(oneDay.derivedMatic) * ethPrices.oneDay : 0\n                // const priceUSDWeek = week ? parseFloat(week.derivedMatic) * ethPrices.week : 0\n\n                const priceUSDChange =\n                    priceUSD && priceUSDOneDay ? getPercentChange(priceUSD.toString(), priceUSDOneDay.toString()) : 0\n                // const priceUSDChangeWeek =\n                // priceUSD && priceUSDWeek ? getPercentChange(priceUSD.toString(), priceUSDWeek.toString()) : 0\n                const txCount =\n                    current && oneDay\n                        ? parseFloat(current.txCount) - parseFloat(oneDay.txCount)\n                        : current\n                            ? parseFloat(current.txCount)\n                            : 0\n                // const feesUSD =\n                //     current && oneDay\n                //         ? parseFloat(current.feesUSD) - parseFloat(oneDay.feesUSD)\n                //         : current\n                //             ? parseFloat(current.feesUSD)\n                //             : 0\n\n                accum[address] = {\n                    exists: !!current,\n                    address,\n                    name: current ? formatTokenName(address, current.name) : '',\n                    symbol: current ? formatTokenSymbol(address, current.symbol) : '',\n                    volumeUSD,\n                    volumeUSDChange,\n                    // volumeUSDWeek,\n                    txCount,\n                    tvlUSD,\n                    // feesUSD,\n                    tvlUSDChange,\n                    tvlToken,\n                    priceUSD,\n                    priceUSDChange,\n                    // priceUSDChangeWeek\n                }\n\n                return accum\n            }, {})\n\n            setTokens(Object.values(formatted))\n\n        } catch (err) {\n            setTokens('failed')\n            throw new Error('Info tokens fetching ' + err)\n        } finally {\n            setTokensLoading(false)\n        }\n    }\n\n    async function fetchTokensByTime(blockNumber: number, tokenAddresses: string[]): Promise<TokenInSubgraph[] | string> {\n\n        try {\n\n            const { data: { tokens }, error: error } = await dataClient.query<SubgraphResponse<TokenInSubgraph[]>>({\n                query: TOKENS_FROM_ADDRESSES(blockNumber, tokenAddresses),\n                fetchPolicy: 'network-only'\n            })\n\n            if (error) return `${error.name} ${error.message}`\n\n            return tokens\n\n        } catch (err) {\n            throw new Error('Tokens fetching by time ' + err)\n        }\n    }\n\n    async function fetchPoolsByTime(blockNumber: number, tokenAddresses: string[]): Promise<PoolSubgraph[] | string> {\n\n        try {\n\n            const { data: { pools }, error } = await dataClient.query<SubgraphResponse<PoolSubgraph[]>>({\n                query: POOLS_FROM_ADDRESSES(blockNumber, tokenAddresses),\n                fetchPolicy: 'network-only'\n            })\n\n            if (error) return `${error.name} ${error.message}`\n\n            return pools\n\n        } catch (err) {\n            throw new Error('Pools by time fetching ' + err)\n        }\n    }\n\n    async function fetchLastEntry(pool: string): Promise<FeeSubgraph[] | string> {\n        try {\n            const { data: { feeHourDatas }, error } = await dataClient.query<SubgraphResponse<FeeSubgraph[]>>({\n                query: CHART_FEE_LAST_ENTRY(),\n                fetchPolicy: 'network-only',\n                variables: { pool }\n            })\n\n            if (error) return `${error.name} ${error.message}`\n\n            return feeHourDatas\n\n        } catch (err) {\n            throw new Error('Fees last failed: ' + err)\n        }\n    }\n\n    async function fetchLastNotEmptyEntry(pool: string, timestamp: string): Promise<FeeSubgraph[] | string> {\n        try {\n            const { data: { feeHourDatas }, error } = await dataClient.query<SubgraphResponse<FeeSubgraph[]>>({\n                query: CHART_FEE_LAST_NOT_EMPTY(),\n                fetchPolicy: 'network-only',\n                variables: { pool, timestamp: Number(timestamp) }\n            })\n            if (error) return `${error.name} ${error.message}`\n\n            if (feeHourDatas.length === 0) return []\n\n            return feeHourDatas\n\n        } catch (err) {\n            throw new Error('Fees last not empty failed:' + err)\n        }\n    }\n\n    async function fetchPoolLastNotEmptyEntry(pool: string, timestamp: number): Promise<LastPoolSubgraph[] | string> {\n\n        try {\n\n            const { data: { poolHourDatas }, error } = await dataClient.query<SubgraphResponse<LastPoolSubgraph[]>>({\n                query: CHART_POOL_LAST_NOT_EMPTY(),\n                fetchPolicy: 'network-only',\n                variables: { pool, timestamp }\n            })\n\n            if (error) return `${error.name} ${error.message}`\n\n            if (poolHourDatas.length === 0) return []\n\n            return poolHourDatas\n\n        } catch (err) {\n            throw new Error('Pool last not empty failed:' + err)\n        }\n    }\n\n    async function fetchPoolLastEntry(pool: string): Promise<LastPoolSubgraph[] | string> {\n        try {\n\n            const { data: { poolHourDatas }, error } = await dataClient.query<SubgraphResponse<LastPoolSubgraph[]>>({\n                query: CHART_POOL_LAST_ENTRY(),\n                fetchPolicy: 'network-only',\n                variables: { pool }\n            })\n\n            if (error) return `${error.name} ${error.message}`\n\n            return poolHourDatas\n\n        } catch (err) {\n            throw new Error('Fees last failed: ' + err)\n        }\n    }\n\n    async function fetchFeePool(pool: string, startTimestamp: number, endTimestamp: number) {\n        try {\n            setFeesLoading(true)\n\n            const { data: { feeHourDatas } } = await dataClient.query<SubgraphResponse<FeeSubgraph[]>>({\n                query: CHART_FEE_POOL_DATA(),\n                fetchPolicy: 'network-only',\n                variables: { pool, startTimestamp, endTimestamp }\n            })\n\n            const _feeHourData = feeHourDatas.length === 0 ? await fetchLastEntry(pool) : feeHourDatas\n\n            if (typeof _feeHourData === 'string') return\n\n            const previousData = await fetchLastNotEmptyEntry(pool, _feeHourData[0].timestamp)\n\n            if (typeof previousData === 'string') return\n\n            if (_feeHourData.length !== 0) {\n                setFees({\n                    data: _feeHourData,\n                    previousData: previousData || []\n                })\n            } else {\n                setFees({\n                    data: [],\n                    previousData: previousData || []\n                })\n            }\n\n        } catch (err) {\n\n            setFees('Failed')\n        } finally {\n            setFeesLoading(false)\n        }\n    }\n\n    async function fetchChartPoolData(pool: string, startTimestamp: number, endTimestamp: number) {\n        try {\n            setChartPoolDataLoading(true)\n\n            const { data: { poolHourDatas }, error } = await dataClient.query<SubgraphResponse<LastPoolSubgraph[]>>({\n                query: CHART_POOL_DATA(),\n                fetchPolicy: 'network-only',\n                variables: { pool, startTimestamp, endTimestamp }\n            })\n\n            if (error) return\n\n            const _poolHourDatas = poolHourDatas.length === 0 ? await fetchPoolLastEntry(pool) : poolHourDatas\n\n            if (typeof _poolHourDatas === 'string') return\n\n            const previousData = await fetchPoolLastNotEmptyEntry(pool, _poolHourDatas[0].periodStartUnix)\n\n            if (typeof previousData === 'string') return\n\n            if (_poolHourDatas.length !== 0) {\n                setChartPoolData({\n                    data: _poolHourDatas,\n                    previousData: previousData || []\n                })\n            } else {\n                setChartPoolData({\n                    data: [],\n                    previousData: previousData || []\n                })\n            }\n\n        } catch (err) {\n            setChartPoolData('Chart pool data failed: ' + err)\n        } finally {\n            setChartPoolDataLoading(false)\n        }\n    }\n\n    async function fetchTotalStats() {\n\n        try {\n\n            setTotalStatsLoading(true)\n\n            const [_block24, _block48, _blockWeek, _blockMonth] = [block24, block48].sort((a, b) => +b.timestamp - +a.timestamp)\n\n            const { data: data, error: error } = await dataClient.query<SubgraphResponse<TotalStatSubgraph[]>>({\n                query: TOTAL_STATS(),\n                fetchPolicy: 'network-only'\n            })\n\n            if (error) {\n                setTotalStats('Failed')\n                return\n            }\n\n            const { data: data24, error: error24 } = await dataClient.query<SubgraphResponse<TotalStatSubgraph[]>>({\n                query: TOTAL_STATS(_block24.number),\n                fetchPolicy: 'network-only'\n            })\n\n            if (error24) {\n                setTotalStats('Failed')\n                return\n            }\n\n            // const { data: dataWeek, error: errorWeek } = await dataClient.query<SubgraphResponse<TotalStatSubgraph[]>>({\n            //     query: TOTAL_STATS(_blockWeek.number),\n            //     fetchPolicy: 'network-only'\n            // })\n\n            // if (errorWeek) {\n            //     setTotalStats('Failed')\n            //     return\n            // }\n\n            // const { data: dataMonth, error: errorMonth } = await dataClient.query<SubgraphResponse<TotalStatSubgraph[]>>({\n            //     query: TOTAL_STATS(_blockMonth.number),\n            //     fetchPolicy: 'network-only'\n            // })\n\n            // if (errorMonth) {\n            //     setTotalStats('Failed')\n            //     return\n            // }\n\n            const stats = data.factories[0]\n            const stats24 = data24.factories[0]\n            // const statsWeek = dataWeek.factories[0]\n            // const statsMonth = dataMonth.factories[0]\n\n            const volumeUSD =\n                stats && stats24\n                    ? parseFloat(stats.totalVolumeUSD) - parseFloat(stats24.totalVolumeUSD)\n                    : parseFloat(stats.totalVolumeUSD)\n\n            const txCount = stats && stats24 ? parseFloat(stats.txCount) - parseFloat(stats24.txCount)\n                : stats ? parseFloat(stats.txCount) : 0\n\n            const feesCollected = stats && stats24 ? parseFloat(stats.totalFeesUSD) - parseFloat(stats24.totalFeesUSD) : stats ? parseFloat(stats.totalFeesUSD) : 0\n\n            setTotalStats({\n                tvlUSD: parseFloat(stats.totalValueLockedUSD),\n                volumeUSD,\n                txCount,\n                feesCollected\n            })\n\n        } catch (err) {\n            console.error('total stats failed', err)\n            setTotalStats('Failed')\n        }\n\n        setTotalStatsLoading(false)\n    }\n\n\n    async function fetchEternalFarmingsAPRByPool(poolAddresses: string[]): Promise<EternalFarmingByPool[]> {\n\n        try {\n\n            const { data: { eternalFarmings }, error } = await farmingClient.query({\n                query: FETCH_ETERNAL_FARM_FROM_POOL(poolAddresses),\n                fetchPolicy: 'network-only'\n            })\n\n            return eternalFarmings\n\n        } catch (err) {\n            throw new Error('Eternal fetch error ' + err)\n        }\n\n    }\n\n    return {\n        blocksFetched: blockError ? false : !!ethPrices && !!blocks,\n        fetchInfoPools: { poolsResult, poolsLoading, fetchInfoPoolsFn: fetchInfoPools },\n        fetchInfoTokens: { tokensResult, tokensLoading, fetchInfoTokensFn: fetchInfoTokens },\n        fetchChartFeesData: { feesResult, feesLoading, fetchFeePoolFn: fetchFeePool },\n        fetchChartPoolData: { chartPoolData, chartPoolDataLoading, fetchChartPoolDataFn: fetchChartPoolData },\n        fetchTotalStats: { totalStats, totalStatsLoading, fetchTotalStatsFn: fetchTotalStats },\n    }\n}\n","import React from \"react\";\nimport \"./index.scss\";\n\ninterface DataRowProps {\n    data: any[];\n    grid: string;\n    header?: any;\n    rowId: number;\n}\n\nexport const DataRow = ({ data, grid, header, rowId }: DataRowProps) => {\n    return (\n        <div className={`data-row pb-1 pt-1 ${grid}`}>\n            <span>{rowId}</span>\n            {data.map((el, i) => {\n                return (\n                    <span key={i} className={header[i].props.className}>\n                        {el.title}\n                    </span>\n                );\n            })}\n        </div>\n    );\n};\n","import { t, Trans } from \"@lingui/macro\";\nimport React from \"react\";\nimport { TYPE } from \"theme\";\nimport \"./index.scss\";\n\ninterface PageButtonsProps {\n    page: number;\n    maxPage: number;\n    setPage: (a: number) => void;\n}\n\nexport default function PageButtons({ page, maxPage, setPage }: PageButtonsProps) {\n    return (\n        <div className={\"table-page-buttons-wrapper mt-1\"}>\n            <div\n                onClick={() => {\n                    setPage(page === 1 ? page : page - 1);\n                }}\n            >\n                <div className={\"table-page-button mt-1\"}>←</div>\n            </div>\n            <div className={\"mt-1\"}>\n                <TYPE.body>{t`Page ${page} of ${maxPage}`}</TYPE.body>\n            </div>\n            <div\n                onClick={() => {\n                    setPage(page === maxPage ? page : page + 1);\n                }}\n            >\n                <div className={\"table-page-button mt-1\"}>→</div>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport AutoColumn from \"../../shared/components/AutoColumn\";\nimport { DataRow } from \"./DataRow\";\nimport PageButtons from \"./PageButtons\";\n\nconst MAX_ITEMS = 10;\n\ninterface TableBodyProps {\n    data: any;\n    maxItems: number;\n    sortField: string;\n    sortIndex: number;\n    sortDirection: boolean;\n    gridClass: string;\n    header: any;\n}\n\nconst TableBody = ({ data, maxItems = MAX_ITEMS, sortField, sortIndex, sortDirection, gridClass, header }: TableBodyProps) => {\n    const [page, setPage] = useState(1);\n    const [maxPage, setMaxPage] = useState(1);\n\n    useEffect(() => {\n        let extraPages = 1;\n        if (data.length % maxItems === 0) {\n            extraPages = 0;\n        }\n        setMaxPage(Math.floor(data.length / maxItems) + extraPages);\n    }, [maxItems, data]);\n\n    const sortedPools = useMemo(() => {\n        if (!Array.isArray(data)) return [];\n\n        return data\n            ? data\n                  .sort((a, b) => {\n                      if (a && b) {\n                          return +a[sortIndex].value > +b[sortIndex].value ? (sortDirection ? -1 : 1) * 1 : (sortDirection ? -1 : 1) * -1;\n                      } else {\n                          return -1;\n                      }\n                  })\n                  .slice(maxItems * (page - 1), page * maxItems)\n            : [];\n    }, [maxItems, page, data, sortDirection, sortField, sortIndex]);\n\n    return (\n        <>\n            {sortedPools.length > 0 ? (\n                <AutoColumn gap={\"0\"}>\n                    {sortedPools.map((poolData, i) => poolData && <DataRow data={poolData} key={i} grid={gridClass} header={header.props.children} rowId={(page - 1) * MAX_ITEMS + (i + 1)} />)}\n                    <PageButtons page={page} maxPage={maxPage} setPage={setPage} />\n                </AutoColumn>\n            ) : null}\n        </>\n    );\n};\n\nexport default TableBody;\n","import React from 'react'\nimport './index.scss'\nimport TableBody from './TableBody'\n\n\ninterface InfoPoolsTableProps {\n    gridClass: string\n    children: any\n    data: any\n    sortDirection: boolean\n    sortIndex: number\n    sortField: string\n}\n\nexport default function Table({ children, gridClass, data, sortDirection, sortIndex, sortField }: InfoPoolsTableProps) {\n    // pagination\n    return (\n        <div className={gridClass}>\n            {children}\n            <TableBody\n                gridClass={gridClass}\n                data={data}\n                sortDirection={sortDirection}\n                sortIndex={sortIndex}\n                sortField={sortField}\n                maxItems={10}\n                header={children} />\n        </div>\n    )\n}\n","import { HelpCircle } from \"react-feather\";\nimport React from \"react\";\nimport { Trans } from \"@lingui/macro\";\n\nexport const Apr = () => (\n    <span className={\"table-header__apr\"}>\n        <span>\n            <Trans>🚀 APR</Trans>\n        </span>\n        <span style={{ marginLeft: \"6px\" }}>\n            <HelpCircle style={{ display: \"block\" }} color={\"white\"} size={\"1rem\"} />\n        </span>\n        <span className={\"helper\"}>\n            <Trans>\n                Based on <span className={\"helper-part\"}>fees</span> / <span className={\"helper-part\"}>active liquidity</span>\n            </Trans>\n        </span>\n    </span>\n);\n","import { useCallback } from 'react'\n\nexport function useHandleSort(sortField: string, sortDirection: boolean, setSortDirection: (a: boolean) => void, setSortField: (a: string) => void, setSortIndex: (a: number) => void) {\n    return useCallback((newField: string, newIndex: number) => {\n            setSortField(newField)\n            setSortIndex(newIndex)\n            setSortDirection(sortField !== newField ? true : !sortDirection)\n        },\n        [sortDirection, sortField]\n    )\n}\n","import { useCallback } from 'react'\n\nexport function useHandleArrow(sortField: string, sortIndex: number, sortDirection: boolean) {\n    return useCallback((field: string) => {\n        return sortField === field ? (!sortDirection ? '↑' : '↓') : ''\n    }, [sortDirection, sortField, sortIndex])\n}\n","import React from 'react'\n\ninterface TableHeaderProps {\n    children: any\n    handleSort: any\n    sortFields: any\n    arrow: any\n    gridClass: string\n}\n\nconst TableHeader = ({ children, handleSort, sortFields, arrow, gridClass }: TableHeaderProps) => {\n    return <div className={`pb-1 table-header ${gridClass}`}>\n        <span className={'table-header__item'}>#</span>\n        {children.map((el: any, i: any) =>\n            <span className={el.props.className} key={i} onClick={() => handleSort(sortFields[i].value, i)}>\n                {el}{arrow(sortFields[i].value)}\n            </span>)}\n    </div>\n}\n\nexport default TableHeader\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport Loader from \"../Loader\";\nimport Table from \"../Table\";\nimport { formatDollarAmount, formatPercent } from \"../../utils/numbers\";\nimport \"../Table/index.scss\";\nimport \"./index.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport { Pool } from \"./PoolRow\";\nimport { Apr } from \"./AprHeader\";\nimport { useHandleSort } from \"../../hooks/useHandleSort\";\nimport { useHandleArrow } from \"../../hooks/useHandleArrow\";\nimport TableHeader from \"../Table/TableHeader\";\nimport { t, Trans } from \"@lingui/macro\";\n\ninterface InfoPoolsProps {\n    data: any;\n    refreshing: boolean;\n    fetchHandler: () => any;\n    blocksFetched: boolean;\n}\n\nconst sortFields = [\n    {\n        title: t`Pool`,\n        value: \"pool\",\n    },\n    {\n        title: t`Volume 24H`,\n        value: \"volumeUSD\",\n    },\n    {\n        title: t`Volume 7D`,\n        value: \"volumeUSDWeek\",\n    },\n    // {\n    //     title: t`Volume 1M`,\n    //     value: \"volumeUSDMonth\",\n    // },\n    {\n        title: t`TVL`,\n        value: \"tvlUSD\",\n    },\n    // {\n    //     title: t`Txs 24H`,\n    //     value: \"txCount\",\n    // },\n    {\n        title: t`🚀 APR`,\n        value: \"apr\",\n    },\n    {\n        title: t`🔥 Farming`,\n        value: \"farmingApr\",\n    },\n];\n\nexport function InfoPools({ data, fetchHandler, blocksFetched }: InfoPoolsProps) {\n    const [sortField, setSortField] = useState(\"tvlUSD\");\n    const [sortIndex, setSortIndex] = useState(3);\n    const [sortDirection, setSortDirection] = useState<boolean>(true);\n    const handleSort = useHandleSort(sortField, sortDirection, setSortDirection, setSortField, setSortIndex);\n    const arrow = useHandleArrow(sortField, sortIndex, sortDirection);\n\n    useEffect(() => {\n        if (blocksFetched) {\n            fetchHandler();\n        }\n    }, [blocksFetched]);\n\n    const _data = useMemo(() => {\n        return (\n            data &&\n            data.map((el: any, i: any) => {\n                const pool = Pool({ token0: el.token0, token1: el.token1, fee: el.fee, address: el.address });\n                const apr = el.apr > 0 ? <span style={{ color: \"var(--green)\" }}>{formatPercent(el.apr)}</span> : <span>-</span>;\n                const farming =\n                    el.farmingApr > 0 ? (\n                        <NavLink to={`/farming/infinite-farms`} className={\"farming-link\"} data-apr={el.farmingApr > 0}>\n                            {formatPercent(el.farmingApr)}\n                        </NavLink>\n                    ) : (\n                        <span>-</span>\n                    );\n\n                return [\n                    {\n                        title: pool,\n                        value: el.address,\n                    },\n                    {\n                        title: formatDollarAmount(el.volumeUSD),\n                        value: el.volumeUSD,\n                    },\n                    {\n                        title: formatDollarAmount(el.volumeUSDWeek),\n                        value: el.volumeUSDWeek,\n                    },\n                    // {\n                    //     title: formatDollarAmount(el.volumeUSDMonth),\n                    //     value: el.volumeUSDMonth,\n                    // },\n                    {\n                        title: formatDollarAmount(el.tvlUSD),\n                        value: el.tvlUSD,\n                    },\n                    // {\n                    //     title: el.txCount,\n                    //     value: el.txCount,\n                    // },\n                    {\n                        title: apr,\n                        value: el.apr,\n                    },\n                    {\n                        title: farming,\n                        value: el.farmingApr,\n                    },\n                ];\n            })\n        );\n    }, [data]);\n\n    if (!data)\n        return (\n            <div className={\"mock-loader\"}>\n                <Loader stroke={\"var(--loader)\"} size={\"25px\"} />\n            </div>\n        );\n\n    return (\n        <div style={{ overflow: \"auto\" }}>\n            <div className={\"w-100 pools-table-wrapper\"}>\n                <Table gridClass={\"grid-pools-table\"} sortIndex={sortIndex} sortDirection={sortDirection} sortField={sortField} data={_data}>\n                    <TableHeader arrow={arrow} sortFields={sortFields} handleSort={handleSort} gridClass={\"grid-pools-table\"}>\n                        <span className={\"table-header__item\"}>\n                            <Trans>Pool</Trans>\n                        </span>\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>Volume 24H</Trans>\n                        </span>\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>Volume 7D</Trans>\n                        </span>\n                        {/* <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>Volume 1M</Trans>\n                        </span> */}\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>TVL</Trans>\n                        </span>\n                        {/* <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>Txs 24H</Trans>\n                        </span> */}\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Apr />\n                        </span>\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>🔥 Farming</Trans>\n                        </span>\n                    </TableHeader>\n                </Table>\n            </div>\n        </div>\n    );\n}\n","import DoubleCurrencyLogo from \"../DoubleLogo\";\nimport { Token } from \"@uniswap/sdk-core\";\nimport { WrappedCurrency } from \"../../models/types\";\nimport { TYPE } from \"../../theme\";\nimport { BarChart2, ExternalLink } from \"react-feather\";\nimport { feeTierPercent } from \"../../utils\";\nimport { NavLink } from \"react-router-dom\";\nimport React from \"react\";\n\nimport AlgebraConfig from \"algebra.config\";\nimport { useActiveWeb3React } from \"hooks/web3\";\n\nexport const Pool = ({ token0, token1, fee, address }: any) => {\n    const { chainId } = useActiveWeb3React();\n\n    const poolTitle = () => {\n        if (!token1 || !token0) return [];\n        if (token0.symbol === \"USDC\") {\n            return [token1.symbol, token0.symbol];\n        }\n        return [token0.symbol, token1.symbol];\n    };\n    const _poolTitle = poolTitle();\n\n    return (\n        <div className={\"f f-jc f-ac\"}>\n            <DoubleCurrencyLogo\n                currency0={new Token(AlgebraConfig.CHAIN_PARAMS[chainId || 56].chainId, token0?.id, 18, token0.symbol) as WrappedCurrency}\n                currency1={new Token(AlgebraConfig.CHAIN_PARAMS[chainId || 56].chainId, token1?.id, 18, token1.symbol) as WrappedCurrency}\n                size={20}\n            />\n            <a className={\"link f-ac\"} href={`${AlgebraConfig.CHAIN_PARAMS[chainId || 56].blockExplorerURL}/address/${address}`} rel=\"noopener noreferrer\" target=\"_blank\">\n                <TYPE.label ml=\"8px\">\n                    {_poolTitle[0]}/{_poolTitle[1]}\n                </TYPE.label>\n                <ExternalLink size={16} color={\"var(--text1)\"} />\n            </a>\n            <span className={\"fee-badge ml-05 mr-05\"}>{feeTierPercent(+fee)}</span>\n            <NavLink className={\"chart-link hover-op trans-op\"} to={`/info/pools/${address}`}>\n                <BarChart2 size={18} stroke={\"white\"} />\n            </NavLink>\n        </div>\n    );\n};\n","import React from 'react'\nimport { TYPE } from 'theme'\nimport styled from 'styled-components/macro'\n\nconst Wrapper = styled(TYPE.main)<{ fontWeight: number; fontSize: string; negative: boolean; neutral: boolean }>`\n  font-size: ${({ fontSize }) => fontSize};\n  font-weight: ${({ fontWeight }) => fontWeight};\n  color: ${({ negative }) => (negative ? '#FFCC06' : '#33FF89')};\n`\n\nexport interface LogoProps {\n    value: number | undefined\n    decimals?: number\n    fontSize?: string\n    fontWeight?: number\n    wrap?: boolean\n    simple?: boolean\n}\n\nexport default function Percent({\n    value,\n    decimals = 2,\n    fontSize = '16px',\n    fontWeight = 500,\n    wrap = false,\n    simple = false,\n    ...rest\n}: LogoProps) {\n    if (value === undefined || value === null) {\n        return (\n            <TYPE.main fontWeight={fontWeight} fontSize={fontSize}>\n                -\n            </TYPE.main>\n        )\n    }\n\n    const truncated = parseFloat(value.toFixed(decimals))\n\n    if (simple) {\n        return (\n            <Wrapper {...rest} fontWeight={fontWeight} fontSize={fontSize} negative={false}\n                     neutral={true}>\n                {Math.abs(value).toFixed(decimals)}%\n            </Wrapper>\n        )\n    }\n\n    return (\n        <Wrapper {...rest} fontWeight={fontWeight} fontSize={fontSize} negative={truncated < 0}\n                 neutral={truncated === 0}>\n            {wrap && '('}\n            {truncated < 0 && '↓'}\n            {truncated > 0 && '↑'}\n            {Math.abs(value).toFixed(decimals)}%{wrap && ')'}\n        </Wrapper>\n    )\n}\n","import styled from 'styled-components/macro'\nimport { TYPE } from 'theme'\n\n// responsive text\nexport const Label = styled(TYPE.label)<{ end?: number }>`\n  display: flex;\n  font-size: 16px;\n  font-weight: 400;\n  justify-content: ${({ end }) => (end ? 'flex-end' : 'flex-start')};\n  align-items: center;\n  font-variant-numeric: tabular-nums;\n\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\n    justify-content: start;\n  `};\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n   font-size: 14px;\n  `};\n`\n\nexport const ClickableText = styled(Label)`\n  text-align: end;\n\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n  user-select: none;\n  @media screen and (max-width: 640px) {\n    font-size: 12px;\n  }\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\n    justify-content: start;\n    min-width: 93px !important;\n  `};\n`\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport Loader from \"../Loader\";\nimport { useHandleSort } from \"../../hooks/useHandleSort\";\nimport { formatDollarAmount } from \"../../utils/numbers\";\nimport Percent from \"../Percent\";\nimport \"./index.scss\";\nimport { useHandleArrow } from \"../../hooks/useHandleArrow\";\nimport { TokenRow } from \"./TokenRow\";\nimport Table from \"../Table\";\nimport TableHeader from \"../Table/TableHeader\";\nimport { t, Trans } from \"@lingui/macro\";\n\ninterface InfoTokensProps {\n    data: any;\n    refreshing: boolean;\n    fetchHandler: () => any;\n    blocksFetched: boolean;\n}\n\nconst sortFields = [\n    {\n        title: t`Name`,\n        value: \"name\",\n    },\n    {\n        title: t`Price`,\n        value: \"priceUSD\",\n    },\n    {\n        title: t`Price Change`,\n        value: \"priceUSDChange\",\n    },\n    {\n        title: t`Volume 24H`,\n        value: \"volumeUSD\",\n    },\n    {\n        title: t`TVL`,\n        value: \"tvlUSD\",\n    },\n];\n\nexport function InfoTokens({ data, fetchHandler, blocksFetched }: InfoTokensProps) {\n    const [sortField, setSortField] = useState<string>(\"tvlUSD\");\n    const [sortDirection, setSortDirection] = useState<boolean>(true);\n    const [sortIndex, setSortIndex] = useState<number>(4);\n\n    const handleSort = useHandleSort(sortField, sortDirection, setSortDirection, setSortField, setSortIndex);\n    const arrow = useHandleArrow(sortField, sortIndex, sortDirection);\n\n    useEffect(() => {\n        if (blocksFetched) {\n            fetchHandler();\n        }\n    }, [blocksFetched]);\n\n    const _data = useMemo(() => {\n        return (\n            data &&\n            data.map((el: any, i: number) => {\n                const token = TokenRow({ address: el.address, symbol: el.symbol, name: el.name });\n\n                return [\n                    {\n                        title: token,\n                        value: el.address,\n                    },\n                    {\n                        title: formatDollarAmount(el.priceUSD, 3),\n                        value: el.priceUSD,\n                    },\n                    {\n                        title: <Percent key={i} value={el.priceUSDChange} fontWeight={400} />,\n                        value: el.priceUSDChange,\n                    },\n                    {\n                        title: formatDollarAmount(el.volumeUSD),\n                        value: el.volumeUSD,\n                    },\n                    {\n                        title: formatDollarAmount(el.tvlUSD),\n                        value: el.tvlUSD,\n                    },\n                ];\n            })\n        );\n    }, [data]);\n\n    if (!data)\n        return (\n            <div className={\"mock-loader\"}>\n                <Loader stroke={\"var(--loader)\"} size={\"25px\"} />\n            </div>\n        );\n    return (\n        <div style={{ overflow: \"overlay\" }}>\n            <div className={\"tokens-table-wrapper\"}>\n                <Table gridClass={\"grid-tokens-table\"} sortIndex={sortIndex} sortField={sortField} sortDirection={sortDirection} data={_data}>\n                    <TableHeader gridClass={\"grid-tokens-table\"} sortFields={sortFields} handleSort={handleSort} arrow={arrow}>\n                        <span className={\"table-header__item\"}>\n                            <Trans>Name</Trans>\n                        </span>\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>Price</Trans>\n                        </span>\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>Price Change</Trans>\n                        </span>\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>Volume 24H</Trans>\n                        </span>\n                        <span className={\"table-header__item table-header__item--center\"}>\n                            <Trans>TVL</Trans>\n                        </span>\n                    </TableHeader>\n                </Table>\n            </div>\n        </div>\n    );\n}\n","import CurrencyLogo from \"../CurrencyLogo\";\nimport { Token } from \"@uniswap/sdk-core\";\nimport { WrappedCurrency } from \"../../models/types\";\nimport { HideMedium, MediumOnly } from \"../../theme\";\nimport { Label } from \"../Text\";\nimport { RowFixed } from \"../Row\";\nimport HoverInlineText from \"../HoverInlineText\";\nimport { ExternalLink } from \"react-feather\";\nimport React from \"react\";\n\nimport AlgebraConfig from \"algebra.config\";\nimport { useActiveWeb3React } from \"hooks/web3\";\n\nexport const TokenRow = ({ address, symbol, name }: any) => {\n    const { chainId } = useActiveWeb3React();\n\n    return (\n        <a className={\"link\"} href={`${AlgebraConfig.CHAIN_PARAMS[chainId || 56].blockExplorerURL}/address/${address}`} rel=\"noopener noreferrer\" target=\"_blank\">\n            <span className={\"currency-wrapper hover-op trans-op\"}>\n                <span className={\"currency-wrapper__row\"}>\n                    <CurrencyLogo currency={new Token(AlgebraConfig.CHAIN_PARAMS[chainId || 56].chainId, address, 18, symbol) as WrappedCurrency} size={\"20px\"} />\n                </span>\n                <MediumOnly>\n                    <Label>{symbol}</Label>\n                </MediumOnly>\n                <HideMedium>\n                    <RowFixed>\n                        <HoverInlineText text={name} maxCharacters={18} />\n                        <Label ml=\"8px\" color={\"var(--text1)\"}>\n                            ({symbol})\n                        </Label>\n                    </RowFixed>\n                </HideMedium>\n                <ExternalLink size={16} color={\"var(--text1)\"} />\n            </span>\n        </a>\n    );\n};\n","export function hexToRgbA(hex: string, opacity: number) {\n    let c\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n        c = hex.substring(1).split('')\n        if (c.length == 3) {\n            c = [c[0], c[0], c[1], c[1], c[2], c[2]]\n        }\n        c = '0x' + c.join('')\n        return `rgba(${[(+c >> 16) & 255, (+c >> 8) & 255, +c & 255].join(',')},${opacity})`\n    }\n    throw new Error('Bad Hex')\n}\n","export function getPositionTokensSortRange(token0Range: number[], token1Range: number[]) {\n    return [\n        token0Range.sort((a, b) => a - b),\n        token1Range.sort((a, b) => a - b)\n    ]\n}\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { area, axisBottom, axisLeft, create, curveBumpX, easeCircleOut, interpolate, line, max, min, scaleLinear, scaleTime, select } from \"d3\";\nimport dayjs from \"dayjs\";\nimport { ChartSpan, ChartType } from \"../../models/enums\";\nimport { FeeChart, FormattedFeeChart, PriceRangeChart } from \"../../models/interfaces\";\nimport { ChartToken } from \"../../models/enums/poolInfoPage\";\nimport { convertLocalDate } from \"../../utils/convertDate\";\nimport { convertDateTime } from \"../../utils/time\";\nimport stc from \"string-to-color\";\nimport { hexToRgbA } from \"../../utils/hexToRgba\";\nimport { getPositionTokensSortRange } from \"../../utils/getPositionTokensRange\";\nimport usePrevious, { usePreviousNonEmptyArray } from \"hooks/usePrevious\";\n\ninterface ChartInterface {\n    feeData: FeeChart;\n    dimensions: {\n        width: number;\n        height: number;\n        margin: { top: number; right: number; bottom: number; left: number };\n    };\n    span: ChartSpan;\n    type: ChartType;\n    isMobile: boolean;\n    tokens: {\n        token0: string | undefined;\n        token1: string | undefined;\n    };\n    token: number;\n    positions: {\n        closed: PriceRangeChart | null;\n        opened: PriceRangeChart | null;\n    };\n    selected: string[];\n}\n\nexport default function Chart({ feeData: { data, previousData }, span, type, dimensions, isMobile, tokens: { token0, token1 }, token, positions: { closed, opened }, selected }: ChartInterface) {\n    const svgRef = useRef(null);\n    const { width, height, margin } = dimensions;\n    const svgWidth = width + margin.left + margin.right + 10;\n    const svgHeight = height + margin.bottom + margin.top;\n\n    const [firstLoad, setFirstLoad] = useState(true);\n    const prevSelected = usePreviousNonEmptyArray(selected);\n    const prevSpan = usePrevious(span);\n    const prevToken = usePrevious(token);\n\n    const firstNonEmptyValue = useMemo(() => {\n        if (!previousData) return null;\n\n        if (previousData[0]) {\n            return {\n                value: previousData[0].value,\n                timestamp: previousData[0].timestamp,\n            };\n        } else {\n            return null;\n        }\n    }, [data, previousData]);\n\n    const xTicks = useMemo(() => {\n        switch (span) {\n            case ChartSpan.DAY:\n                return 24;\n            case ChartSpan.MONTH:\n                return 31;\n            case ChartSpan.WEEK:\n                return 7;\n        }\n    }, [span]);\n\n    const tickWidth = useMemo(() => {\n        switch (span) {\n            case ChartSpan.DAY:\n                return dimensions.width / 24;\n            case ChartSpan.MONTH:\n                return dimensions.width / 31;\n            case ChartSpan.WEEK:\n                return dimensions.width / 7;\n        }\n    }, [span, dimensions, data]);\n\n    const _chartData = useMemo(() => {\n        if (!data || data.length === 0) return [];\n\n        const _span = span !== ChartSpan.DAY ? \"day\" : \"hour\";\n\n        let sameDays: (FormattedFeeChart | undefined)[] = [];\n        let res: any[] = [];\n\n        if (data.length === 0 || (data[1] && dayjs(data[1].timestamp).isSame(data[0]?.timestamp))) {\n            res.push({\n                value: data[0]?.value,\n                timestamp: data[0]?.timestamp,\n            });\n        }\n\n        for (let i = span === ChartSpan.DAY ? 0 : 1; i < data.length; i++) {\n            if (\n                dayjs(data[i]?.timestamp)\n                    .startOf(span !== ChartSpan.DAY ? \"day\" : _span)\n                    .isSame(dayjs(data[i - 1]?.timestamp).startOf(_span))\n            ) {\n                sameDays.push(data[i]);\n            } else {\n                if (sameDays.length !== 0) {\n                    res.push(\n                        sameDays.reduce(\n                            (prev, cur) => ({\n                                // @ts-ignore\n                                timestamp: cur.timestamp,\n                                value:\n                                    span === ChartSpan.DAY || type === ChartType.FEES || type === ChartType.VOLUME || type === ChartType.PRICE\n                                        ? // @ts-ignore\n                                          prev.value + cur.value\n                                        : // @ts-ignore\n                                          Math.max(prev.value, cur.value),\n                            }),\n                            { value: 0, timestamp: new Date() }\n                        )\n                    );\n                    if (type === ChartType.FEES || type === ChartType.PRICE) {\n                        // @ts-ignore\n                        res[res.length - 1].value = res[res.length - 1].value / sameDays.length;\n                    }\n                } else {\n                    res.push({\n                        value: data[i]?.value,\n                        timestamp: data[i]?.timestamp,\n                    });\n                }\n                sameDays = [];\n            }\n        }\n\n        if (sameDays.length !== 0) {\n            res.push(\n                sameDays.reduce(\n                    (prev, cur) => {\n                        return {\n                            // @ts-ignore\n                            timestamp: cur.timestamp,\n                            value:\n                                span === ChartSpan.DAY || type === ChartType.FEES || type === ChartType.VOLUME || type === ChartType.PRICE\n                                    ? // @ts-ignore\n                                      prev.value + cur.value\n                                    : // @ts-ignore\n                                      Math.max(prev.value, cur.value),\n                        };\n                    },\n                    {\n                        value: 0,\n                        timestamp: new Date(),\n                    }\n                )\n            );\n            if (type === ChartType.FEES || type === ChartType.PRICE) {\n                // @ts-ignore\n                res[res.length - 1].value = res[res.length - 1].value / sameDays.length;\n            }\n        }\n\n        if (res.length === 0) {\n            res = res.concat([...data]);\n        }\n\n        res = res.map((date) => ({\n            timestamp: new Date(dayjs(date?.timestamp).startOf(_span).unix() * 1000),\n            value: date?.value,\n        }));\n\n        let _data: any[] = [];\n\n        if (res.length < xTicks) {\n            const firstRealDay = dayjs(res[0].timestamp).startOf(_span);\n            const lastRealDay = dayjs(res[res.length - 1].timestamp).startOf(_span);\n\n            const firstAdditionalDay = dayjs(Date.now())\n                .startOf(_span)\n                .subtract(xTicks - 1, _span)\n                .startOf(_span);\n            const lastAdditionalDay = dayjs(Date.now()).startOf(_span);\n\n            if (firstRealDay > firstAdditionalDay) {\n                for (let i = firstAdditionalDay.unix(); i < firstRealDay.unix(); i += span === ChartSpan.DAY ? 3600 : 24 * 3600) {\n                    _data.push({\n                        timestamp: new Date(i * 1000),\n                        value: type === ChartType.VOLUME ? 0 : firstNonEmptyValue ? firstNonEmptyValue.value : 0,\n                    });\n                }\n            }\n\n            _data.push({\n                timestamp: new Date(res[0].timestamp),\n                value: res[0].value,\n            });\n\n            let last = _data[_data.length - 1];\n\n            for (let i = 1; i < res.length; i++) {\n                const isNext = dayjs(res[i].timestamp)\n                    .startOf(_span)\n                    .subtract(1, _span)\n                    .isSame(dayjs(res[i - 1].timestamp).startOf(_span));\n\n                if (isNext) {\n                    _data.push({\n                        timestamp: new Date(dayjs(res[i].timestamp).startOf(_span).unix() * 1000),\n                        value: res[i].value,\n                    });\n                } else {\n                    const difference = dayjs(res[i].timestamp).startOf(_span).diff(last.timestamp, _span);\n\n                    for (let j = 1; j <= difference; j++) {\n                        const nextDay = new Date(dayjs(last.timestamp).startOf(_span).add(1, _span).startOf(_span).unix() * 1000);\n\n                        _data.push({\n                            timestamp: nextDay,\n                            value:\n                                type === ChartType.VOLUME\n                                    ? dayjs(nextDay)\n                                          .startOf(_span)\n                                          .isSame(dayjs(new Date(res[i].timestamp)).startOf(_span))\n                                        ? res[i].value\n                                        : 0\n                                    : last.value,\n                        });\n\n                        last = _data[_data.length - 1];\n                    }\n                }\n                last = res[i];\n            }\n\n            if (lastRealDay < lastAdditionalDay) {\n                for (let i = lastRealDay.add(1, _span).unix(); i <= lastAdditionalDay.unix(); i += span === ChartSpan.DAY ? 3600 : 24 * 3600) {\n                    _data.push({\n                        timestamp: new Date(i * 1000),\n                        value: type === ChartType.VOLUME ? 0 : res[res.length - 1].value,\n                    });\n                }\n            }\n        } else {\n            _data = [...res];\n        }\n\n        return [..._data];\n    }, [data, previousData]);\n\n    const xScale = useMemo(\n        () =>\n            scaleTime()\n                // @ts-ignore\n                .domain([min(_chartData, (d) => new Date(d.timestamp)), max(_chartData, (d) => new Date(d.timestamp))])\n                .range([0, width]),\n        [span, _chartData]\n    );\n\n    const yScale = useMemo(\n        () =>\n            scaleLinear()\n                // @ts-ignore\n                .domain([min(_chartData, (d) => (d.value > 0 ? d.value - d.value * 0.2 : 0)), max(_chartData, (d) => +d.value + d.value * 0.2)])\n                .range([height, 0]),\n        [span, _chartData, token]\n    );\n\n    function throttle(callback: any, wait: any) {\n        let timeout: any;\n        return function (e: any) {\n            if (timeout) return;\n            timeout = setTimeout(() => (callback(e), (timeout = undefined)), wait);\n        };\n    }\n\n    const OutOfChartTooltipGroup = create(\"svg:g\").style(\"pointer-events\", \"none\");\n\n    const OutOfChartTooltipRect = create(\"svg:rect\").attr(\"width\", 60).attr(\"height\", 25).attr(\"rx\", \"8\");\n    const OutOfChartTooltipChevron = create(\"svg:rect\").attr(\"width\", 10).attr(\"height\", 10);\n\n    const OutOfChartTooltipText = create(\"svg:text\").attr(\"fill\", \"white\").attr(\"y\", 18);\n\n    OutOfChartTooltipGroup.append(() => OutOfChartTooltipRect.node());\n    OutOfChartTooltipGroup.append(() => OutOfChartTooltipChevron.node());\n    OutOfChartTooltipGroup.append(() => OutOfChartTooltipText.node());\n\n    const priceRects = useMemo(() => {\n        const res: any[] = [];\n        const halfOfHeight = height / 2;\n\n        let outRangeIndex = 0;\n        let outTimeIndex = 0;\n        let outRangeIds: { [key: string]: boolean } = {};\n        let outTimeIds: { [key: string]: boolean } = {};\n\n        function setTooltipPricePositions(height0: number, height1: number, width: number, y: number, res: any[], halfOfHeight: number, rect: any, positionNumber: string) {\n            if (outRangeIds[positionNumber]) return;\n\n            const clonedRect = select(OutOfChartTooltipRect.node()).clone();\n            const clonedChevron = select(OutOfChartTooltipChevron.node()).clone();\n            const clonedGroup = select(OutOfChartTooltipGroup.node()).clone();\n            const clonedText = select(OutOfChartTooltipText.node()).clone();\n\n            clonedGroup.append(() => clonedRect.node());\n            clonedGroup.append(() => clonedChevron.node());\n            clonedGroup.append(() => clonedText.node());\n\n            clonedText.property(\"innerHTML\", positionNumber);\n\n            //hack for getting text width for SVG not existing in DOM\n            const div = document.createElement(\"div\");\n            div.style.position = \"absolute\";\n            div.style.visibility = \"hidden\";\n            div.style.fontSize = \"12\";\n            div.style.width = \"auto\";\n            div.style.height = \"auto\";\n            div.innerHTML = positionNumber;\n\n            document.body.appendChild(div);\n            clonedText.attr(\"x\", `${(60 - div.offsetWidth) / 2}px`);\n            document.body.removeChild(div);\n\n            clonedGroup.attr(\"id\", `pos-${positionNumber}`).attr(\"data-previous\", \"true\");\n            clonedRect.attr(\"fill\", stc(positionNumber));\n\n            clonedChevron.attr(\"fill\", stc(positionNumber));\n\n            if (height1 < 0 || height0 < 0) {\n                const marginLeft = outRangeIndex > 0 ? 80 * outRangeIndex + (outRangeIndex > 1 ? 0 : 10) : 20;\n\n                if (y > halfOfHeight) {\n                    clonedChevron.style(\"transform\", \"translate(30px, 18px) rotate(45deg)\");\n                    clonedGroup.attr(\"transform\", `translate(${marginLeft}, ${height - 40})`);\n                } else {\n                    clonedChevron.style(\"transform\", \"translate(30px, -7px) rotate(45deg)\");\n                    clonedGroup.attr(\"transform\", `translate(${marginLeft}, 10)`);\n                }\n                res.push(clonedGroup);\n                outRangeIndex++;\n                outRangeIds = {\n                    ...outRangeIds,\n                    [positionNumber]: true,\n                };\n            } else if (width <= 0) {\n                const marginTop = outTimeIndex > 0 ? 80 * outTimeIndex + (outTimeIndex > 1 ? 0 : 10) : 45;\n\n                clonedChevron.style(\"transform\", \"translate(1px, 6px) rotate(45deg)\");\n                clonedGroup.attr(\"transform\", `translate(20, ${marginTop})`);\n\n                outTimeIndex++;\n                outTimeIds = {\n                    ...outTimeIds,\n                    [positionNumber]: true,\n                };\n\n                const outsideIdx = res.findIndex((el: any) => el.node().id === clonedGroup.node()?.id && el.node()?.dataset.previous);\n\n                if (outsideIdx === -1) {\n                    res.push(clonedGroup);\n                }\n            } else {\n                const outsideIdx = res.findIndex((el: any) => el.node().id === rect.node()?.id && el.node()?.dataset.previous);\n\n                if (outsideIdx > -1) {\n                    res.splice(outsideIdx, 1, rect);\n                } else {\n                    res.push(rect);\n                }\n            }\n        }\n\n        for (const key in opened) {\n            if (selected.some((item) => item === key)) {\n                const pos = opened[key];\n                const [_token0Range, _token1Range] = getPositionTokensSortRange(pos.token0Range, pos.token1Range);\n\n                let token1Height = Math.abs(yScale(_token0Range[1]) - yScale(_token0Range[0]));\n                let token0Height = yScale(_token1Range[0]) - yScale(_token1Range[1]);\n\n                let outOfChart = false;\n\n                if (token === ChartToken.TOKEN1) {\n                    if (yScale(_token0Range[1]) < 0 && yScale(_token0Range[1]) + token1Height > height) {\n                        outOfChart = true;\n                        token1Height = height;\n                    } else if (yScale(_token0Range[1]) < 0) {\n                        outOfChart = true;\n                        token1Height = token1Height - Math.abs(yScale(_token0Range[1]));\n                    }\n                }\n                if (token === ChartToken.TOKEN0) {\n                    if (yScale(_token1Range[1]) < 0 && yScale(_token1Range[1]) + token0Height > height) {\n                        outOfChart = true;\n                        token0Height = height;\n                    } else if (yScale(_token1Range[1]) < 0) {\n                        outOfChart = true;\n                        token0Height = token0Height - Math.abs(yScale(_token1Range[1]));\n                    } else if (yScale(_token1Range[1]) + token0Height > height) {\n                        token0Height = token0Height - (yScale(_token1Range[1]) + token0Height - height);\n                    }\n                }\n\n                if (pos.timestamps.length > 1) {\n                    for (let i = 0; i < pos.timestamps.length; i++) {\n                        if (!pos.timestamps[i + 1]) {\n                            const posWidth = xScale(+pos.timestamps[i] * 1000) < 0 ? width : width - xScale(+pos.timestamps[i] * 1000);\n                            const posX = xScale(+pos.timestamps[i] * 1000) < 0 ? 0 : xScale(+pos.timestamps[i] * 1000);\n                            const posY = token === ChartToken.TOKEN1 ? (outOfChart ? 0 : yScale(_token0Range[1])) : outOfChart ? 0 : yScale(_token1Range[1]);\n\n                            const rect = create(\"svg:rect\")\n                                .append(\"rect\")\n                                .attr(\"id\", `pos-${key}`)\n                                .attr(\"width\", posWidth)\n                                .attr(\"height\", token === ChartToken.TOKEN1 ? token1Height : token0Height)\n                                .attr(\"fill\", hexToRgbA(stc(key), 0.4))\n                                .attr(\"y\", posY)\n                                .attr(\"x\", posX)\n                                .attr(\"min\", token === ChartToken.TOKEN1 ? pos.token0Range[0] : pos.token1Range[0])\n                                .attr(\"max\", token === ChartToken.TOKEN1 ? pos.token0Range[1] : pos.token1Range[1]);\n\n                            setTooltipPricePositions(token0Height, token1Height, posWidth, posY, res, halfOfHeight, rect, key);\n                        } else {\n                            const posWidth =\n                                xScale(+pos.timestamps[i + 1] * 1000) < 0\n                                    ? 0\n                                    : xScale(+pos.timestamps[i] * 1000) < 0\n                                    ? Math.abs(Math.abs(xScale(+pos.timestamps[i + 1] * 1000) - Math.abs(xScale(+pos.timestamps[i] * 1000))) - Math.abs(xScale(+pos.timestamps[i] * 1000)))\n                                    : xScale(+pos.timestamps[i + 1] * 1000) - xScale(+pos.timestamps[i] * 1000);\n\n                            const posX = xScale(+pos.timestamps[i] * 1000) < 0 ? 0 : xScale(+pos.timestamps[i] * 1000);\n                            const posY = token === ChartToken.TOKEN1 ? (outOfChart ? 0 : yScale(_token0Range[1])) : outOfChart ? 0 : yScale(_token1Range[1]);\n\n                            const rect = create(\"svg:rect\")\n                                .append(\"rect\")\n                                .attr(\"id\", `pos-${key}`)\n                                .attr(\"width\", posWidth)\n                                .attr(\"height\", `${token === ChartToken.TOKEN1 ? token1Height : token0Height}`)\n                                .attr(\"fill\", hexToRgbA(stc(key), 0.4))\n                                .attr(\"y\", posY)\n                                .attr(\"x\", posX)\n                                .attr(\"min\", token === ChartToken.TOKEN1 ? pos.token0Range[0] : pos.token1Range[0])\n                                .attr(\"max\", token === ChartToken.TOKEN1 ? pos.token0Range[1] : pos.token1Range[1]);\n\n                            setTooltipPricePositions(token0Height, token1Height, posWidth, posY, res, halfOfHeight, rect, key);\n                        }\n\n                        i++;\n                    }\n                } else {\n                    const posWidth = xScale(+pos.startTime * 1000) < 0 ? width : width - xScale(+pos.startTime * 1000);\n                    const posX = xScale(+pos.startTime * 1000) < 0 ? 0 : xScale(+pos.startTime * 1000);\n                    const posY = token === ChartToken.TOKEN1 ? (outOfChart ? 0 : yScale(_token0Range[1])) : outOfChart ? 0 : yScale(_token1Range[1]);\n\n                    const rect = create(\"svg:rect\")\n                        .append(\"rect\")\n                        .attr(\"id\", `pos-${key}`)\n                        .attr(\"width\", posWidth)\n                        .attr(\"height\", token === ChartToken.TOKEN1 ? token1Height : token0Height)\n                        .attr(\"fill\", hexToRgbA(stc(key), 0.4))\n                        .attr(\"y\", posY)\n                        .attr(\"x\", posX)\n                        .attr(\"min\", token === ChartToken.TOKEN1 ? pos.token0Range[0] : pos.token1Range[0])\n                        .attr(\"max\", token === ChartToken.TOKEN1 ? pos.token0Range[1] : pos.token1Range[1]);\n\n                    setTooltipPricePositions(token0Height, token1Height, posWidth, posY, res, halfOfHeight, rect, key);\n                }\n            }\n        }\n\n        for (const key in closed) {\n            // rework\n            if (selected.some((item) => item === key)) {\n                const pos = closed[key];\n\n                if (!pos.endTime) return;\n\n                const [_token0Range, _token1Range] = getPositionTokensSortRange(pos.token0Range, pos.token1Range);\n\n                let token1Height = Math.abs(yScale(_token0Range[1]) - yScale(_token0Range[0]));\n                let token0Height = yScale(_token1Range[0]) - yScale(_token1Range[1]);\n                let posWidth = xScale(+pos.endTime * 1000) - xScale(+pos.startTime * 1000) - Math.abs(xScale(+pos.startTime * 1000));\n\n                let outOfChart = false;\n\n                if (token === ChartToken.TOKEN1) {\n                    if (yScale(_token0Range[1]) < 0) {\n                        outOfChart = true;\n                        token1Height = token1Height - Math.abs(yScale(_token0Range[1]));\n                    }\n                } else {\n                    if (yScale(_token1Range[1]) + token0Height > height) {\n                        outOfChart = true;\n                        token0Height = token0Height - (yScale(_token1Range[1]) + token0Height - height);\n                    }\n                }\n\n                if (span === ChartSpan.WEEK || span === ChartSpan.MONTH) {\n                    let widthDif = 0;\n                    if (xScale(+pos.endTime * 1000) > width) {\n                        widthDif = xScale(+pos.endTime * 1000) - width;\n                    }\n                    if (xScale(+pos.startTime * 1000) < 0) {\n                        posWidth = xScale(+pos.endTime * 1000) - widthDif;\n                    } else {\n                        posWidth = xScale(+pos.endTime * 1000) - xScale(+pos.startTime * 1000) - widthDif;\n                    }\n                }\n\n                if (pos.timestamps.length > 2) {\n                    for (let i = 0; i < pos.timestamps.length; i++) {\n                        if (pos.timestamps[i + 1]) {\n                            const posX = xScale(+pos.timestamps[i] * 1000) < 0 ? 0 : xScale(+pos.timestamps[i] * 1000);\n                            const posY = token === ChartToken.TOKEN1 ? (outOfChart ? 0 : yScale(_token0Range[1])) : outOfChart ? 0 : yScale(_token1Range[1]);\n                            const posWidth =\n                                xScale(+pos.timestamps[i + 1] * 1000) < 0\n                                    ? 0\n                                    : xScale(+pos.timestamps[i] * 1000) < 0\n                                    ? xScale(+pos.timestamps[i + 1] * 1000)\n                                    : Math.abs(xScale(+pos.timestamps[i + 1] * 1000) - xScale(+pos.timestamps[i] * 1000));\n                            const posHeight = token === ChartToken.TOKEN1 ? token1Height : token0Height;\n\n                            const rect = create(\"svg:rect\")\n                                .append(\"rect\")\n                                .attr(\"id\", `pos-${key}`)\n                                .attr(\"width\", posWidth)\n                                .attr(\"height\", `${posHeight > height ? height : posHeight}`)\n                                .attr(\"fill\", hexToRgbA(stc(key), 0.4))\n                                .attr(\"y\", posY)\n                                .attr(\"x\", posX)\n                                .attr(\"min\", token === ChartToken.TOKEN1 ? pos.token0Range[0] : pos.token1Range[0])\n                                .attr(\"max\", token === ChartToken.TOKEN1 ? pos.token0Range[1] : pos.token1Range[1]);\n                            i++;\n                            setTooltipPricePositions(token0Height, token1Height, posWidth, posY, res, halfOfHeight, rect, key);\n                        }\n                    }\n                } else {\n                    const posX = xScale(+pos.startTime * 1000) < 0 ? 0 : xScale(+pos.startTime * 1000);\n                    const posY = token === ChartToken.TOKEN1 ? (outOfChart ? 0 : yScale(_token0Range[1])) : yScale(_token1Range[1]);\n\n                    const rect = create(\"svg:rect\")\n                        .append(\"rect\")\n                        .attr(\"id\", `pos-${key}`)\n                        .attr(\"width\", posWidth)\n                        .attr(\"height\", `${token === ChartToken.TOKEN1 ? token1Height : token0Height}`)\n                        .attr(\"fill\", hexToRgbA(stc(key), 0.4))\n                        .attr(\"y\", posY)\n                        .attr(\"x\", posX)\n                        .attr(\"min\", token === ChartToken.TOKEN1 ? pos.token0Range[0] : pos.token1Range[0])\n                        .attr(\"max\", token === ChartToken.TOKEN1 ? pos.token0Range[1] : pos.token1Range[1]);\n\n                    setTooltipPricePositions(token0Height, token1Height, posWidth, posY, res, halfOfHeight, rect, key);\n                }\n            }\n        }\n        return res;\n    }, [closed, opened, token, yScale, _chartData, selected]);\n\n    const pricesRangesGroup = create(\"svg:g\").style(\"pointer-events\", \"none\");\n\n    const Line = create(\"svg:line\")\n        .attr(\"id\", \"pointer2\")\n        .attr(\"x1\", \"0px\")\n        .attr(\"y1\", \"0px\")\n        .attr(\"x2\", \"0px\")\n        .attr(\"y2\", height)\n        .style(\"stroke-width\", 1)\n        .style(\"stroke-dasharray\", \"5, 5\")\n        .style(\"stroke\", \"var(--secondary)\")\n        .style(\"display\", \"none\")\n        .style(\"pointer-events\", \"none\")\n        .style(\"user-select\", \"none\");\n\n    const LineHorizontal = create(\"svg:line\")\n        .attr(\"id\", \"pointer3\")\n        .attr(\"x1\", \"0px\")\n        .attr(\"y1\", 0)\n        .attr(\"x2\", width)\n        .attr(\"y2\", 0)\n        .style(\"stroke-width\", 1)\n        .style(\"stroke-dasharray\", \"5, 5\")\n        .style(\"stroke\", \"var(--secondary)\")\n        .style(\"display\", \"none\");\n\n    const InfoRectGroup = create(\"svg:g\").style(\"pointer-events\", \"none\").style(\"display\", \"none\");\n    const InfoRect = create(\"svg:rect\").append(\"rect\").attr(\"id\", \"info-label\").attr(\"height\", \"20px\").attr(\"rx\", \"8\").style(\"fill\", \"var(--secondary)\");\n    const InfoRectFeeText = create(\"svg:text\").attr(\"fill\", \"white\").attr(\"font-size\", \"12px\");\n\n    const DateRectGroup = create(\"svg:g\").style(\"pointer-events\", \"none\").style(\"display\", \"none\");\n    const DateRect = create(\"svg:rect\").append(\"rect\").attr(\"id\", \"info-label\").attr(\"height\", \"20px\").attr(\"rx\", \"8\").style(\"fill\", \"var(--secondary)\");\n    const DateRectText = create(\"svg:text\").attr(\"fill\", \"white\").attr(\"font-size\", \"12px\");\n\n    const MaxPriceRectGroup = create(\"svg:g\").style(\"pointer-events\", \"none\").style(\"display\", \"none\");\n    const MaxPriceRect = create(\"svg:rect\").append(\"rect\").attr(\"height\", \"20px\").attr(\"rx\", \"8\");\n    const MaxPriceRectText = create(\"svg:text\").attr(\"fill\", \"white\").attr(\"font-size\", \"12px\");\n\n    const MinPriceRectGroup = create(\"svg:g\").style(\"pointer-events\", \"none\").style(\"display\", \"none\");\n    const MinPriceRect = create(\"svg:rect\").append(\"rect\").attr(\"height\", \"20px\").attr(\"rx\", \"8\");\n    const MinPriceRectText = create(\"svg:text\").attr(\"fill\", \"white\").attr(\"font-size\", \"12px\");\n\n    if (InfoRectGroup) {\n        // @ts-ignore\n        InfoRectGroup.node().append(InfoRect.node());\n        // @ts-ignore\n        InfoRectGroup.node().append(InfoRectFeeText.node());\n    }\n\n    if (DateRectGroup) {\n        // @ts-ignore\n        DateRectGroup.node().append(DateRect.node());\n        // @ts-ignore\n        DateRectGroup.node().append(DateRectText.node());\n    }\n\n    if (MaxPriceRectGroup) {\n        // @ts-ignore\n        MaxPriceRectGroup.node()?.append(MaxPriceRect.node());\n        // @ts-ignore\n        MaxPriceRectGroup.node()?.append(MaxPriceRectText.node());\n    }\n\n    if (MinPriceRectGroup) {\n        // @ts-ignore\n        MinPriceRectGroup.node()?.append(MinPriceRect.node());\n        // @ts-ignore\n        MinPriceRectGroup.node()?.append(MinPriceRectText.node());\n    }\n\n    const Focus = create(\"svg:circle\")\n        .style(\"fill\", \"white\")\n        .attr(\"stroke\", \"var(--secondary)\")\n        .attr(\"stroke-width\", \"2\")\n        .attr(\"r\", 5.5)\n        .style(\"opacity\", 1)\n        .style(\"display\", \"none\")\n        .style(\"pointer-events\", \"none\");\n\n    useEffect(() => {\n        if (!data || data.length === 0) return;\n\n        const svgEl = select(svgRef.current);\n        svgEl.selectAll(\"*\").remove();\n\n        let isEntered = false;\n\n        const svg = svgEl.append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n        svg.on(\"mouseenter\", () => {\n            Line.style(\"display\", \"block\");\n            LineHorizontal.style(\"display\", \"block\");\n            InfoRectGroup.style(\"display\", \"block\");\n            DateRectGroup.style(\"display\", \"block\");\n            Focus.style(\"display\", \"block\");\n        });\n\n        svg.on(\"mouseleave\", () => {\n            Line.style(\"display\", \"none\");\n            LineHorizontal.style(\"display\", \"none\");\n            InfoRectGroup.style(\"display\", \"none\");\n            DateRectGroup.style(\"display\", \"none\");\n            MaxPriceRectGroup.style(\"display\", \"none\");\n            MinPriceRectGroup.style(\"display\", \"none\");\n            Focus.style(\"display\", \"none\");\n            isEntered = false;\n        });\n\n        svg.on(\"tap\", () => {\n            Line.style(\"display\", \"block\");\n            LineHorizontal.style(\"display\", \"block\");\n            InfoRectGroup.style(\"display\", \"block\");\n            DateRectGroup.style(\"display\", \"block\");\n            Focus.style(\"display\", \"block\");\n        });\n\n        const xAxisGroup = svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(axisBottom(xScale).ticks(xTicks).tickSizeOuter(0));\n        xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0)\").attr(\"id\", \"xline\");\n        xAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"var(--text1)\").attr(\"font-size\", \"0.75rem\");\n\n        const yAxisGroup = svg.append(\"g\").call(\n            axisLeft(yScale)\n                .ticks(10)\n                .tickFormat((val) => `${type === ChartType.FEES ? `${val}%` : type === ChartType.PRICE ? `${val}` : `$${val >= 1000 ? `${+val / 1000}k` : val}`}`)\n                .tickSize(-width)\n        );\n\n        yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"var(--tick-line)\").attr(\"id\", \"xline\");\n        yAxisGroup.select(\".domain\").remove();\n        yAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"var(--text1)\").attr(\"font-size\", \"0.75rem\");\n\n        //Gradient\n        svg.append(\"linearGradient\")\n            .attr(\"id\", \"gradient\")\n            .attr(\"x1\", \"0%\")\n            .attr(\"y1\", \"0%\")\n            .attr(\"x2\", \"0%\")\n            .attr(\"y2\", \"100%\")\n            .selectAll(\"stop\")\n            .data([\n                {\n                    offset: \"0%\",\n                    color: \"var(--chart-gradient1)\",\n                },\n                {\n                    offset: \"100%\",\n                    color: \"var(--chart-gradient2)\",\n                },\n            ])\n            .enter()\n            .append(\"stop\")\n            .attr(\"offset\", (d) => d.offset)\n            .attr(\"stop-color\", (d) => d.color);\n\n        // Chart data visualize\n        const linePath = svg\n            .append(\"path\")\n            .datum(_chartData)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"var(--secondary)\")\n            .attr(\"stroke-width\", 2)\n            // @ts-ignore\n            .attr(\n                \"d\",\n                // @ts-ignore\n                line()\n                    .curve(curveBumpX)\n                    .x(function (d) {\n                        // @ts-ignore\n                        return xScale(d.timestamp);\n                    })\n                    .y(function (d) {\n                        // @ts-ignore\n                        return yScale(d.value);\n                    })\n            );\n\n        const areaPath = svg\n            .append(\"path\")\n            .datum(_chartData)\n            .attr(\"fill\", \"url(#gradient)\")\n            // @ts-ignore\n            .attr(\n                \"d\",\n                // @ts-ignore\n                area()\n                    .curve(curveBumpX)\n                    // @ts-ignore\n                    .x((d) => xScale(d.timestamp))\n                    // @ts-ignore\n                    .y0((d) => yScale(min(_chartData, (d) => (d.value > 0 ? d.value - d.value * 0.2 : 0))))\n                    // @ts-ignore\n                    .y1((d) => yScale(d.value))\n            );\n\n        if (firstLoad && !selected.length) {\n            areaPath.style(\"opacity\", 0).transition().delay(900).duration(500).ease(easeCircleOut).style(\"opacity\", 1);\n            linePath\n                .transition()\n                .duration(1000)\n                .ease(easeCircleOut)\n                .attrTween(\"stroke-dasharray\", function () {\n                    const length = this.getTotalLength();\n                    return interpolate(`0,${length}`, `${length},${length}`);\n                });\n            setFirstLoad(false);\n        } else {\n            setFirstLoad(false);\n        }\n\n        if (type === ChartType.PRICE) {\n            if (selected.length !== 1 && selected.length && prevSelected && prevSelected.length && selected.every((el, i) => prevSelected && el == prevSelected[i])) {\n                areaPath.style(\"opacity\", 0);\n            } else if (!selected.length && prevToken && prevToken !== token) {\n                areaPath.style(\"opacity\", 1);\n            } else if (!selected.length && prevSelected && prevSelected.length) {\n                areaPath.style(\"opacity\", 0).transition().duration(500).ease(easeCircleOut).style(\"opacity\", 1);\n            } else if (selected.length === 1 && (!prevSelected || !prevSelected.length)) {\n                areaPath.style(\"opacity\", 1).transition().duration(500).ease(easeCircleOut).style(\"opacity\", 0);\n            } else if (prevSelected && prevSelected.length === 1 && selected.length === 1 && prevSelected[0] === selected[0]) {\n                areaPath.style(\"opacity\", 1).transition().duration(500).ease(easeCircleOut).style(\"opacity\", 0);\n            } else if (selected.length === 1 && prevSelected && prevSelected.length) {\n                areaPath.style(\"opacity\", 0);\n            } else if (selected.length && prevSelected && prevSelected.length) {\n                areaPath.style(\"opacity\", 0);\n            }\n        }\n\n        xAxisGroup\n            .selectAll(\".tick\")\n            .nodes()\n            .map((el, i) => {\n                // @ts-ignore\n                const xTranslate = select(el)\n                    .attr(\"transform\")\n                    .match(/\\((.*?)\\)/)[1]\n                    .split(\",\")[0];\n\n                if (isMobile && span !== ChartSpan.WEEK) {\n                    select(el).selectAll(\"text\").style(\"text-anchor\", \"end\").attr(\"dx\", \"-.8em\").attr(\"dy\", \".15em\").attr(\"transform\", \"rotate(-65)\");\n                }\n\n                if (isMobile && i % 2 === 0) {\n                    select(el).attr(\"display\", \"none\");\n                } else if (i % 2 === 0 && span !== ChartSpan.WEEK) {\n                    select(el).attr(\"display\", \"none\");\n                }\n\n                const hoverHandle = function ({ clientX, clientY }: any) {\n                    throttle(\n                        ({ clientX, clientY }: any) => {\n                            const isOverflowing = Number(xTranslate) + 150 + 16 > dimensions.width;\n                            const date = new Date(_chartData[i]?.timestamp);\n                            Line.attr(\"x1\", `${xTranslate}px`).attr(\"x2\", `${xTranslate}px`);\n                            //@ts-ignore\n                            LineHorizontal.attr(\"y1\", `${yScale(_chartData[i]?.value)}px`).attr(\"y2\", `${yScale(_chartData[i]?.value)}px`);\n\n                            const _value = Number(_chartData[i]?.value);\n\n                            InfoRectFeeText.property(\n                                \"innerHTML\",\n                                `\n                        ${type === ChartType.PRICE || type === ChartType.FEES ? \"\" : \"$\"}\n                        ${_value.toFixed(type === ChartType.FEES ? 3 : type === ChartType.PRICE ? (_value >= 0.1 ? (_value >= 100 ? 0 : 2) : 5) : 2)}\n                        ${type === ChartType.FEES ? \"%\" : \"\"}`\n                            );\n\n                            const textWidth = InfoRectFeeText.node()?.getBoundingClientRect().width;\n\n                            InfoRectFeeText.attr(\"transform\", \"translate(0, 0)\").attr(\"x\", `8px`).attr(\"y\", \"13.5px\");\n\n                            InfoRect.attr(\"width\", `${textWidth ? textWidth + 16 : 0}px`);\n\n                            //@ts-ignore\n                            InfoRectGroup.attr(\"transform\", `translate(-45, ${yScale(_chartData[i]?.value) - 10})`);\n\n                            DateRectText.property(\"innerHTML\", `${convertLocalDate(date)} ${span === ChartSpan.DAY ? convertDateTime(date) : \"\"}`);\n\n                            const dateTextWidth = DateRectText.node()?.getBoundingClientRect().width;\n\n                            DateRectText.attr(\"x\", \"8px\").attr(\"y\", \"13.5px\");\n\n                            DateRect.attr(\"width\", `${dateTextWidth ? dateTextWidth + 16 : 0}`);\n\n                            DateRectGroup.attr(\"transform\", `translate(${Number(xTranslate) - (dateTextWidth ? dateTextWidth / 2 + 8 : 0)}, ${height + 5})`);\n\n                            // @ts-ignore\n                            Focus.attr(\"transform\", `translate(${xScale(_chartData[i].timestamp)},${yScale(_chartData[i]?.value)})`);\n\n                            if (type === ChartType.PRICE) {\n                                let minS = Number.MAX_SAFE_INTEGER;\n                                let closestRect: any;\n\n                                MaxPriceRectGroup.style(\"display\", \"none\");\n                                MinPriceRectGroup.style(\"display\", \"none\");\n\n                                priceRects?.map((item) => {\n                                    const node = item.node().getBoundingClientRect();\n                                    if (clientX > node.x && clientX < node.x + node.width && clientY > node.y && clientY < node.y + node.height) {\n                                        const S = node.width * node.height;\n\n                                        if (S <= minS && item.node().tagName !== \"g\") {\n                                            MaxPriceRectGroup.style(\"display\", \"block\");\n                                            MinPriceRectGroup.style(\"display\", \"block\");\n\n                                            const _maxValue = Number(item.node().attributes.max.value);\n                                            MaxPriceRectText.property(\"innerHTML\", `${_maxValue.toFixed(_maxValue >= 0.1 ? (_maxValue >= 100 ? 0 : 2) : 5)}`);\n\n                                            const maxTextWidth = MaxPriceRectText.node()?.getBoundingClientRect().width;\n\n                                            MaxPriceRectText.attr(\"x\", \"8px\").attr(\"y\", \"13.5px\");\n                                            MaxPriceRectGroup.attr(\"transform\", `translate(-45, ${item.node().y.baseVal.value - 10})`);\n                                            MaxPriceRect.attr(\"width\", `${maxTextWidth ? maxTextWidth + 16 : 0}px`).attr(\"fill\", hexToRgbA(stc(item.node()?.id.split(\"-\")[1]), 1));\n\n                                            const _minValue = Number(item.node().attributes.min.value);\n                                            MinPriceRectText.property(\"innerHTML\", `${_minValue.toFixed(_minValue >= 0.1 ? (_minValue >= 100 ? 0 : 2) : 5)}`);\n\n                                            const minTextWidth = MinPriceRectText.node()?.getBoundingClientRect().width;\n\n                                            MinPriceRectText.attr(\"x\", \"8px\").attr(\"y\", \"13.5px\");\n                                            MinPriceRectGroup.attr(\"transform\", `translate(-45, ${item.node().y.baseVal.value + node.height - 10})`);\n                                            MinPriceRect.attr(\"width\", `${minTextWidth ? minTextWidth + 16 : 0}px`).attr(\"fill\", hexToRgbA(stc(item.node()?.id.split(\"-\")[1]), 1));\n\n                                            minS = S;\n                                            closestRect = item.node();\n                                        }\n                                    }\n                                });\n\n                                closestRect?.setAttribute(\"stroke\", hexToRgbA(stc(closestRect?.id.split(\"-\")[1]), 0.8));\n                                closestRect?.setAttribute(\"stroke-width\", \"1px\");\n\n                                priceRects?.forEach((rect) => {\n                                    if (closestRect && rect.node().id === closestRect.id) {\n                                        rect.node().setAttribute(\"stroke\", hexToRgbA(stc(closestRect?.id.split(\"-\")[1]), 0.8));\n                                    } else if (rect.node() !== closestRect) {\n                                        rect.node().setAttribute(\"stroke\", \"none\");\n                                    }\n                                });\n                            }\n                        },\n                        isEntered ? 55 : 0\n                    )({ clientX, clientY });\n\n                    if (!isEntered) {\n                        isEntered = true;\n                    }\n                };\n\n                const rect = create(\"svg:rect\")\n                    .attr(\"x\", `${+xTranslate - tickWidth / 2}px`)\n                    .attr(\"y\", `-${0}px`)\n                    .attr(\"width\", `${tickWidth + 2}px`)\n                    .attr(\"height\", `${dimensions.height}px`)\n                    .attr(\"fill\", \"transparent\")\n                    .on(\"mousemove\", hoverHandle)\n                    .on(\"touchmove\", hoverHandle);\n\n                // @ts-ignore\n                svg.node().append(rect.node());\n            });\n\n        svg.append(() => Line.node());\n        svg.append(() => LineHorizontal.node());\n\n        priceRects?.forEach((item, i, arr) => {\n            pricesRangesGroup.node()?.append(item.node());\n        });\n\n        svg.append(() => pricesRangesGroup.node());\n        svg.append(() => MaxPriceRectGroup.node());\n        svg.append(() => MinPriceRectGroup.node());\n        svg.append(() => InfoRectGroup.node());\n        svg.append(() => DateRectGroup.node());\n        svg.append(() => Focus.node());\n    }, [data, selected]);\n\n    return <svg ref={svgRef} style={{ overflow: \"visible\" }} width={svgWidth} height={svgHeight} />;\n}\n","import React, { useEffect, useMemo, useRef } from \"react\";\nimport Chart from \"./Chart\";\nimport Loader from \"../Loader\";\nimport { ChartType } from \"../../models/enums\";\nimport { isMobile, isTablet } from \"react-device-detect\";\nimport { FeeChart, FeeSubgraph, PoolHourData, PriceRangeChart } from \"../../models/interfaces\";\nimport { ChartToken } from \"../../models/enums/poolInfoPage\";\nimport { Trans } from \"@lingui/macro\";\nimport { Token } from \"@uniswap/sdk-core\";\nimport Toggle from \"../Toggle\";\nimport \"./index.scss\";\nimport PositionsSelect from \"components/PoolInfoChartToolbar/PositionsSelect\";\nimport { useActiveWeb3React } from \"hooks/web3\";\n\ninterface FeeChartRangeInputProps {\n    fetchedData:\n        | {\n              data: FeeSubgraph[] | PoolHourData[];\n              previousData: FeeSubgraph[] | PoolHourData[];\n          }\n        | undefined\n        | string;\n    refreshing: boolean;\n    id: string;\n    span: number;\n    type: number;\n    token: number;\n    token1: Token | undefined;\n    token0: Token | undefined;\n    setToken: (a: number) => void;\n    positions: {\n        closed: PriceRangeChart | null | any;\n        opened: PriceRangeChart | null | any;\n    };\n    selected: string[];\n    setSelected: any;\n}\n\nexport default function FeeChartRangeInput({ fetchedData, refreshing, span, type, token, token1, token0, setToken, positions, selected, setSelected }: FeeChartRangeInputProps) {\n    const ref = useRef<HTMLDivElement>(null);\n\n    const { account } = useActiveWeb3React();\n\n    const formattedData: FeeChart = useMemo(() => {\n        if (!fetchedData || typeof fetchedData === \"string\")\n            return {\n                data: [],\n                previousData: [],\n            };\n\n        if (!fetchedData || !fetchedData.data || fetchedData.data.length === 0)\n            return {\n                data: [],\n                previousData: [],\n            };\n\n        const isUntracked = fetchedData.data.some((el) => {\n            if (\"volumeUSD\" in el) {\n                return +el.volumeUSD < 1 && +el.untrackedVolumeUSD >= 1;\n            }\n            return;\n        });\n        const field =\n            type === ChartType.PRICE\n                ? token === ChartToken.TOKEN0\n                    ? \"token0Price\"\n                    : \"token1Price\"\n                : type === ChartType.TVL\n                ? \"tvlUSD\"\n                : type === ChartType.VOLUME\n                ? isUntracked\n                    ? \"untrackedVolumeUSD\"\n                    : \"volumeUSD\"\n                : \"feesUSD\";\n\n        if (type === ChartType.FEES) {\n            return {\n                data: fetchedData.data.map((el) => {\n                    if (\"fee\" in el) {\n                        return {\n                            timestamp: new Date(+el.timestamp * 1000),\n                            value: +el.fee / +el.changesCount / 10000,\n                        };\n                    }\n                    return {\n                        timestamp: new Date(),\n                        value: 0,\n                    };\n                }),\n                previousData: fetchedData.previousData.map((el) => {\n                    if (\"fee\" in el) {\n                        return {\n                            timestamp: new Date(+el.timestamp * 1000),\n                            value: +el.fee / +el.changesCount / 10000,\n                        };\n                    }\n                    return {\n                        timestamp: new Date(),\n                        value: 0,\n                    };\n                }),\n            };\n        } else {\n            return {\n                data: fetchedData.data.map((el) => {\n                    if (\"volumeUSD\" in el) {\n                        return {\n                            timestamp: new Date(el.periodStartUnix * 1000),\n                            value: +el[field],\n                        };\n                    }\n                    return {\n                        timestamp: new Date(),\n                        value: 0,\n                    };\n                }),\n                previousData: fetchedData.previousData.map((el) => {\n                    if (\"volumeUSD\" in el) {\n                        return {\n                            timestamp: new Date(el.periodStartUnix * 1000),\n                            value: +el[field],\n                        };\n                    }\n                    return {\n                        timestamp: new Date(),\n                        value: 0,\n                    };\n                }),\n            };\n        }\n    }, [fetchedData, token, account]);\n\n    return (\n        <div className={\"w-100 fee-chart pt-1 mxs_p-0\"} ref={ref}>\n            {refreshing ? (\n                <div className={\"fee-chart__mock-loader\"}>\n                    <Loader stroke={\"var(--loader)\"} size={\"25px\"} />\n                </div>\n            ) : (\n                <>\n                    <div>\n                        {type === ChartType.PRICE && (\n                            <div className={\"fee-chart__price-info\"}>\n                                <Toggle\n                                    isActive={!!token}\n                                    toggle={() => setToken(token === ChartToken.TOKEN0 ? 1 : 0)}\n                                    checked={<Trans>{token0?.symbol}</Trans>}\n                                    unchecked={<Trans>{token1?.symbol}</Trans>}\n                                />\n                            </div>\n                        )}\n                        {/* {type === ChartType.PRICE && account && (\n                            <div className={\"fee-chart__toggle\"}>\n                                <PositionsSelect positions={positions} selected={selected} setSelected={setSelected} />\n                            </div>\n                        )} */}\n                    </div>\n                    <Chart\n                        feeData={formattedData}\n                        dimensions={{\n                            width: isTablet || isMobile ? (ref && ref.current && ref.current.offsetWidth - 40) || 0 : 1000,\n                            height: isTablet || isMobile ? 200 : 400,\n                            margin: { top: type === ChartType.PRICE ? 50 : 20, right: 20, bottom: isMobile ? 70 : 30, left: isMobile ? 30 : 35 },\n                        }}\n                        tokens={{ token0: token0?.symbol, token1: token1?.symbol }}\n                        isMobile={isMobile}\n                        span={span}\n                        type={type}\n                        token={token}\n                        positions={positions}\n                        selected={selected}\n                    />\n                </>\n            )}\n        </div>\n    );\n}\n","import { ChartType } from \"../../models/enums\";\nimport PositionsSelect from \"./PositionsSelect\";\nimport { PriceRangeChart } from \"../../models/interfaces\";\nimport { Trans } from \"@lingui/macro\";\nimport \"./index.scss\";\n\ninterface PoolInfoChartToolbarProps {\n    chartTypes: any;\n    chartSpans: any;\n    type: number;\n    span: number;\n    setType: any;\n    setSpan: any;\n    zoom: number;\n    handleZoomIn: () => void;\n    handleZoomOut: () => void;\n}\n\nexport default function PoolInfoChartToolbar({ chartTypes, chartSpans, type, span, setType, setSpan, zoom, handleZoomIn, handleZoomOut }: PoolInfoChartToolbarProps) {\n    return (\n        <div className={\"flex-s-between ms_fd-c ms_f-as mxs_fd-c mxs_f-as\"}>\n            <div className=\"mxs_w-100\">\n                <div className={\"toolbar-btn-title\"}>\n                    <Trans>CHART TYPE</Trans>\n                </div>\n                <ul className=\"toolbar-btn__list mt-05\">\n                    {chartTypes.map((el: any, i: number) => (\n                        <button className={`btn mr-05 toolbar-btn hover-op trans-op ${type === el.type && \"active c-d\"}`} onClick={() => setType(el.type)} key={i}>\n                            {el.title}\n                        </button>\n                    ))}\n                </ul>\n            </div>\n            <div className=\"ml-a ms_ml-0 ms_mt-05 mxs_ml-0 mxs_mt-05\">\n                {type !== ChartType.LIQUIDITY && (\n                    <div className={\"toolbar-btn-title\"}>\n                        <Trans>CHART SPAN</Trans>\n                    </div>\n                )}\n                {type !== ChartType.LIQUIDITY && (\n                    <ul className={\"mt-05 ms_w-100 ms_mt-05 mxs_w-100 mxs_mt-05\"}>\n                        {chartSpans.map((el: any, i: number) => (\n                            <button className={`btn toolbar-btn hover-op trans-op ${span === el.type && \"active c-d\"}`} onClick={() => setSpan(el.type)} key={i}>\n                                {el.title}\n                            </button>\n                        ))}\n                    </ul>\n                )}\n                {type === ChartType.LIQUIDITY && (\n                    <>\n                        <div className=\"toolbar-btn-title\">\n                            <Trans>ZOOM</Trans>\n                        </div>\n                        <div className=\"toolbar-btn__zoom f\">\n                            <button className=\"toolbar-btn__zoom-btn mr-05\" disabled={zoom === 10} onClick={handleZoomIn}>\n                                +\n                            </button>\n                            <button className=\"toolbar-btn__zoom-btn\" disabled={zoom === 2} onClick={handleZoomOut}>\n                                -\n                            </button>\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n}\n","import { useMemo } from \"react\";\nimport { Token } from \"@uniswap/sdk-core\";\nimport DoubleCurrencyLogo from \"../../components/DoubleLogo\";\nimport \"./index.scss\";\nimport { Trans } from \"@lingui/macro\";\n\nimport AlgebraConfig from \"algebra.config\";\nimport { useActiveWeb3React } from \"hooks/web3\";\nimport { ChainId } from \"constants/addresses\";\n\ninterface PoolInfoHeaderProps {\n    token0: Token | undefined;\n    token1: Token | undefined;\n    fee: string;\n    collectedFees: string;\n}\n\nexport function PoolInfoHeader({ token0, token1, fee, collectedFees }: PoolInfoHeaderProps) {\n    const { chainId } = useActiveWeb3React();\n\n    const poolTitle = useMemo(() => {\n        if (!token1 || !token0) return [];\n        if (token0.symbol === \"USDC\") {\n            return [token1.symbol, token0.symbol];\n        }\n        return [token0.symbol, token1.symbol];\n    }, [token0, token1]);\n\n    return (\n        <div className={\"b mb-1\"}>\n            <div className={\"flex-s-between info-pool-header\"}>\n                <div className={\"f f-ac mxs_w-100\"}>\n                    <span className={\"fs-15 flex-s-between ml-15\"}>\n                        <span className={\"mr-05\"}>\n                            <DoubleCurrencyLogo\n                                currency0={token0 && new Token(chainId || ChainId.BNB, token0.address, 18, token0?.symbol)}\n                                currency1={token1 && new Token(chainId || ChainId.BNB, token1.address, 18, token1?.symbol)}\n                                size={30}\n                            />\n                        </span>\n                        <span className=\"info-pool-header__pair\">\n                            {poolTitle[0] || \"...\"} / {poolTitle[1] || \"...\"}\n                        </span>\n                    </span>\n                    <span className={\"ml-1 br-8 fee-badge c-p mxs_ml-a\"}>{`${+fee / 10000}%`}</span>\n                </div>\n                {+collectedFees !== 0 && (\n                    <span className={\"ml-a mxs_w-100 mxs_mt-1\"}>\n                        <Trans>\n                            Total Collected Fees: <span className={\"c-p\"}>${Math.round(+collectedFees) || \" <0.001\"}</span>\n                        </Trans>\n                    </span>\n                )}\n            </div>\n            <span />\n        </div>\n    );\n}\n","import { useEffect, useMemo, useRef } from \"react\";\nimport { axisBottom, create, max, scaleBand, scaleLinear, select } from \"d3\";\nimport { ProcessedData } from \"../../models/interfaces\";\nimport { t, Trans } from \"@lingui/macro\";\n\ninterface BarChartProps {\n    data: ProcessedData[] | undefined;\n    dimensions: {\n        width: number;\n        height: number;\n        margin: { top: number; right: number; bottom: number; left: number };\n    };\n    activeTickIdx: number | undefined;\n    isMobile: boolean;\n}\n\nexport default function BarChart({ data, activeTickIdx, dimensions }: BarChartProps) {\n    const svgRef = useRef(null);\n    const { width, height, margin } = dimensions;\n    const svgWidth = width + margin.left + margin.right + 10;\n    const svgHeight = height + margin.bottom + margin.top;\n\n    const token0 = useMemo(() => {\n        if (!data) return;\n        return data[0].token0;\n    }, [data]);\n    const token1 = useMemo(() => {\n        if (!data) return;\n        return data[0].token1;\n    }, [data]);\n\n    const activeTickIdxInRange = useMemo(() => {\n        if (!activeTickIdx || !data || data.length === 0) return;\n\n        return data.findIndex((v: any) => v.index === activeTickIdx);\n    }, [activeTickIdx, data]);\n\n    useEffect(() => {\n        if (!data || data.length === 0 || !Array.isArray(data) || !activeTickIdxInRange) return;\n\n        const xDomain = new Set(data.map((v) => v.price0));\n        const yDomain = [0, max(data, (v) => v.activeLiquidity)];\n\n        const xScale = scaleBand(xDomain, [0, width]);\n        // @ts-ignore\n        const yScale = scaleLinear(yDomain, [height, 0]);\n\n        const svgEl = select(svgRef.current);\n\n        svgEl.selectAll(\"*\").remove();\n\n        const InfoRectGroup = create(\"svg:g\").style(\"pointer-events\", \"none\").style(\"display\", \"none\");\n\n        const InfoRect = create(\"svg:rect\").append(\"rect\").attr(\"id\", \"info-label\").attr(\"width\", \"220px\").attr(\"height\", \"90px\").attr(\"rx\", \"6\").style(\"fill\", \"#12151d\");\n\n        const InfoRectPrice0 = create(\"svg:text\").attr(\"transform\", \"translate(16, 25)\").attr(\"fill\", \"white\").attr(\"font-weight\", \"600\").attr(\"font-size\", \"12px\");\n\n        const InfoRectPrice1 = create(\"svg:text\").attr(\"transform\", \"translate(16, 50)\").attr(\"fill\", \"white\").attr(\"font-weight\", \"600\").attr(\"font-size\", \"12px\");\n\n        const InfoRectPriceLocked = create(\"svg:text\").attr(\"transform\", \"translate(16, 75)\").attr(\"fill\", \"white\").attr(\"font-weight\", \"600\").attr(\"font-size\", \"12px\");\n\n        const InfoCurrentCircle = create(\"svg:circle\").attr(\"fill\", \"var(--green)\").attr(\"r\", \"5px\").attr(\"cx\", \"200px\").attr(\"cy\", \"21px\").attr(\"display\", \"none\");\n\n        //TODO rewrite to div\n        // @ts-ignore\n        InfoRectGroup.node().append(InfoRect.node());\n        // @ts-ignore\n        InfoRectGroup.node().append(InfoRectPrice0.node());\n        // @ts-ignore\n        InfoRectGroup.node().append(InfoRectPrice1.node());\n        // @ts-ignore\n        InfoRectGroup.node().append(InfoRectPriceLocked.node());\n        // @ts-ignore\n        InfoRectGroup.node().append(InfoCurrentCircle.node());\n\n        const svg = svgEl.append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n        svg.on(\"mouseenter\", () => {\n            InfoRectGroup.style(\"display\", \"block\");\n        });\n\n        svg.on(\"mouseleave\", () => {\n            InfoRectGroup.style(\"display\", \"none\");\n        });\n\n        svg.on(\"tap\", () => {\n            InfoRectGroup.style(\"display\", \"block\");\n        });\n\n        const xAxisGroup = svg\n            .append(\"g\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(\n                axisBottom(xScale)\n                    .ticks(601)\n                    .tickFormat((v) => (v < 0.01 ? v.toFixed(4) : v.toFixed(2)))\n                    .tickSizeOuter(0)\n            );\n        xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0)\").attr(\"id\", \"xline\");\n        xAxisGroup\n            .selectAll(\"text\")\n            .attr(\"opacity\", 0.5)\n            .attr(\"color\", \"white\")\n            .attr(\"font-size\", \"0.75rem\")\n            .nodes()\n            .map((el, i) => {\n                if (i % 75 !== 0) {\n                    select(el).attr(\"display\", \"none\");\n                }\n            });\n\n        if (activeTickIdxInRange) {\n            svg.append(\"circle\")\n                .attr(\"fill\", \"var(--primary)\")\n                .attr(\"r\", \"5px\")\n                .attr(\"cx\", (xScale(data[activeTickIdxInRange]?.price0) ?? 0) + 2)\n                .attr(\"cy\", -9);\n\n            svg.append(\"text\")\n                .attr(\"transform\", `translate(${(xScale(data[activeTickIdxInRange].price0) ?? 0) + 15}, ${-5})`)\n                .attr(\"fill\", \"var(--primary)\")\n                .attr(\"font-size\", \"12px\")\n                .property(\"innerHTML\", t`Current price`);\n        }\n\n        svg.append(\"g\")\n            .selectAll(\"rect\")\n            .data(data)\n            .join(\"rect\")\n            .attr(\"fill\", \"var(--secondary)\")\n            .attr(\"x\", (i) => xScale(i.price0) || 0)\n            .attr(\"y\", (i) => yScale(i.activeLiquidity))\n            .attr(\"height\", (i) => yScale(0) - yScale(i.activeLiquidity))\n            .attr(\"width\", xScale.bandwidth());\n\n        svg.append(\"g\")\n            .selectAll(\"rect\")\n            .data(data)\n            .join(\"rect\")\n            .attr(\"x\", (i) => xScale(i.price0) || 0)\n            .attr(\"y\", 0)\n            .attr(\"height\", height)\n            .attr(\"width\", xScale.bandwidth())\n            .attr(\"fill\", (v) => (v.isCurrent ? \"var(--green)\" : \"transparent\"))\n            .on(\"mouseover\", (d, v) => {\n                const highlight = select(d.target);\n                highlight.attr(\"fill\", \"rgba(255,255,255,0.5)\");\n                const xTranslate = xScale(v.price0);\n                const isOverflowing = Number(xTranslate) + 150 + 16 > dimensions.width;\n                InfoRectGroup.attr(\"transform\", `translate(${isOverflowing ? Number(xTranslate) - 220 - 16 : Number(xTranslate) + 16},10)`);\n\n                if (v.index === activeTickIdxInRange) {\n                    InfoCurrentCircle.attr(\"display\", \"block\");\n                } else {\n                    InfoCurrentCircle.attr(\"display\", \"none\");\n                }\n\n                const isLower0 = v.price0 < 0.01;\n                const isLower1 = v.price1 < 0.01;\n                const isLowerTVL = v.tvlToken0 < 0.01;\n\n                InfoRectPrice0.property(\"innerHTML\", t`${data[0].token0} Price: ${isLower0 ? v.price0.toFixed(4) : v.price0.toFixed(3)} ${data[0].token1}`);\n                InfoRectPrice1.property(\"innerHTML\", t`${data[0].token1} Price: ${isLower1 ? v.price1.toFixed(4) : v.price1.toFixed(3)} ${data[0].token0}`);\n\n                InfoRectPriceLocked.property(\n                    \"innerHTML\",\n                    t`${v.index < activeTickIdxInRange ? token0 : token1} Locked: ${isLowerTVL ? v.tvlToken0.toFixed(4) : v.tvlToken0.toFixed(2)} ${v.index >= activeTickIdxInRange ? token1 : token0}`\n                );\n            })\n            .on(\"mouseleave\", (d, v) => {\n                const rect = select(d.target);\n                rect.attr(\"fill\", v.isCurrent ? \"var(--green)\" : \"transparent\");\n            })\n            .on(\"mouseleave\", (d, v) => {\n                const rect = select(d.target);\n                rect.attr(\"fill\", v.isCurrent ? \"#fffb0f\" : \"transparent\");\n            });\n\n        svg.append(() => InfoRectGroup.node());\n    }, [data, activeTickIdxInRange]);\n\n    return <svg ref={svgRef} width={svgWidth} height={svgHeight} />;\n}\n","import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport BarChart from \"./BarChart\";\nimport { isMobile } from \"react-device-detect\";\nimport Loader from \"../Loader\";\nimport { TickMath } from \"@uniswap/v3-sdk\";\nimport { computePoolAddress } from \"../../hooks/computePoolAddress\";\nimport JSBI from \"jsbi\";\nimport { isAddress } from \"../../utils\";\nimport { CurrencyAmount, Token } from \"@uniswap/sdk-core\";\nimport { Pool } from \"../../lib/src\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { LiquidityChartData, ProcessedData } from \"../../models/interfaces\";\nimport \"./index.scss\";\n\nimport AlgebraConfig from \"algebra.config\";\nimport { useActiveWeb3React } from \"hooks/web3\";\n\ninterface LiquidityBarChartProps {\n    data: LiquidityChartData;\n    token0: string;\n    token1: string;\n    refreshing: boolean;\n    zoom: number;\n}\n\nexport default function LiquidityBarChart({ data, token0, token1, refreshing, zoom }: LiquidityBarChartProps) {\n    const { chainId } = useActiveWeb3React();\n\n    const MAX_UINT128 = BigNumber.from(2).pow(128).sub(1);\n\n    const [processedData, setProcessedData] = useState<ProcessedData[] | null>(null);\n    const ref = useRef<HTMLDivElement>(null);\n\n    const formattedAddress0 = isAddress(data?.token0?.address);\n    const formattedAddress1 = isAddress(data?.token1?.address);\n\n    // parsed tokens\n    const _token0 = useMemo(() => {\n        return data && formattedAddress0 && formattedAddress1 ? new Token(AlgebraConfig.CHAIN_PARAMS[chainId || 56].chainId, formattedAddress0, +data.token0.decimals) : undefined;\n    }, [formattedAddress0, formattedAddress1, data]);\n\n    const _token1 = useMemo(() => {\n        return data && formattedAddress0 && formattedAddress1 ? new Token(AlgebraConfig.CHAIN_PARAMS[chainId || 56].chainId, formattedAddress1, +data.token1.decimals) : undefined;\n    }, [formattedAddress1, data]);\n\n    useEffect(() => {\n        if (!data || !data.ticksProcessed) return;\n\n        async function processTicks() {\n            const _data = await Promise.all(\n                data.ticksProcessed.map(async (t: any, i: number) => {\n                    const active = t.tickIdx === data.activeTickIdx;\n                    const sqrtPriceX96 = TickMath.getSqrtRatioAtTick(t.tickIdx);\n                    const mockTicks = [\n                        {\n                            index: t.tickIdx - 60,\n                            liquidityGross: t.liquidityGross,\n                            liquidityNet: JSBI.multiply(t.liquidityNet, JSBI.BigInt(\"-1\")),\n                        },\n                        {\n                            index: t.tickIdx,\n                            liquidityGross: t.liquidityGross,\n                            liquidityNet: t.liquidityNet,\n                        },\n                    ];\n                    const pool = _token0 && _token1 ? new Pool(_token0, _token1, 500, sqrtPriceX96, t.liquidityActive, t.tickIdx, mockTicks) : undefined;\n                    const nextSqrtX96 = data.ticksProcessed[i - 1] ? TickMath.getSqrtRatioAtTick(data.ticksProcessed[i - 1].tickIdx) : undefined;\n\n                    const maxAmountToken0 = _token0 ? CurrencyAmount.fromRawAmount(_token0, MAX_UINT128.toString()) : undefined;\n                    const outputRes0 = pool && maxAmountToken0 ? await pool.getOutputAmount(maxAmountToken0, nextSqrtX96) : undefined;\n\n                    const token1Amount = outputRes0?.[0] as CurrencyAmount<Token> | undefined;\n\n                    const amount0 = token1Amount ? parseFloat(token1Amount.toExact()) * parseFloat(t.price1) : 0;\n                    const amount1 = token1Amount ? parseFloat(token1Amount.toExact()) : 0;\n\n                    return {\n                        index: i,\n                        isCurrent: active,\n                        activeLiquidity: parseFloat(t.liquidityActive.toString()),\n                        price0: parseFloat(t.price0),\n                        price1: parseFloat(t.price1),\n                        tvlToken0: amount0,\n                        tvlToken1: amount1,\n                        token0: token0,\n                        token1: token1,\n                    };\n                })\n            );\n            setProcessedData(_data);\n        }\n\n        processTicks();\n    }, [data, token0, token1]);\n\n    const formattedData = useMemo(() => {\n        if (!processedData) return undefined;\n        if (processedData && processedData.length === 0) return undefined;\n\n        if (zoom === 1) return processedData;\n\n        const middle = Math.round(processedData.length / 2);\n        const chunkLength = Math.round(processedData.length / zoom);\n\n        return processedData.slice(middle - chunkLength, middle + chunkLength);\n    }, [processedData, zoom]);\n\n    const activeTickIdx = useMemo(() => {\n        if (!formattedData) return;\n\n        let idx;\n        for (const i of formattedData) {\n            if (i.isCurrent) {\n                idx = i.index;\n            }\n        }\n\n        return idx;\n    }, [formattedData, zoom]);\n\n    return (\n        <div className={\"w-100 liquidity-chart\"} ref={ref}>\n            {refreshing ? (\n                <div className={\"liquidity-chart__mock-loader\"}>\n                    <Loader stroke={\"var(--loader)\"} size={\"25px\"} />\n                </div>\n            ) : (\n                <BarChart\n                    data={formattedData || undefined}\n                    activeTickIdx={activeTickIdx}\n                    dimensions={{\n                        width: isMobile ? (ref && ref.current && ref.current.offsetWidth - 10) || 0 : 1020,\n                        height: 400,\n                        margin: { top: isMobile ? 80 : 30, right: 20, bottom: isMobile ? 70 : 30, left: isMobile ? 0 : 50 },\n                    }}\n                    isMobile={isMobile}\n                />\n            )}\n        </div>\n    );\n}\n","import Loader from \"../Loader\";\nimport { formatDollarAmount } from \"../../utils/numbers\";\nimport Card from \"../../shared/components/Card/Card\";\n\ninterface StatCardProps {\n    isLoading: boolean;\n    title: string;\n    data: number;\n    style: string;\n    format?: boolean;\n}\n\nexport function StatCard({ isLoading, title, data, style, format }: StatCardProps) {\n    return (\n        <Card classes={`w-100 pa-1 br-12 ${style}`} isDark={false}>\n            <div className={\"mb-1\"}>{title}</div>\n            <div className={\"fs-2 b\"}>\n                {!data ? (\n                    <span>\n                        <Loader size={\"2rem\"} stroke={\"var(--loader)\"} />\n                    </span>\n                ) : format ? (\n                    formatDollarAmount(data)\n                ) : (\n                    data\n                )}\n            </div>\n        </Card>\n    );\n}\n","import { useEffect, useMemo } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { StatCard } from \"./StatCard\";\nimport \"./index.scss\";\nimport { t, Trans } from \"@lingui/macro\";\nimport { AlertCircle } from \"react-feather\";\n\ninterface InfoTotalStatsProps {\n    data: any;\n    isLoading: boolean;\n    refreshHandler: any;\n    blocksFetched: boolean;\n    poolsStat: any;\n}\n\nexport function InfoTotalStats({ data, isLoading, refreshHandler, blocksFetched, poolsStat }: InfoTotalStatsProps) {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        if (blocksFetched) {\n            refreshHandler();\n        }\n    }, [blocksFetched]);\n\n    const pool = useMemo(() => pathname.split(\"pools/\")[1], [pathname]);\n\n    const _data = useMemo(() => {\n        if (pool) {\n            let res = {\n                tvlUSD: undefined,\n                volumeUSD: undefined,\n                txCount: undefined,\n                feesCollected: undefined,\n            };\n            poolsStat?.forEach((item: any) => {\n                if (item.address.toLowerCase() === pool.toLowerCase()) {\n                    res = {\n                        tvlUSD: item.tvlUSD,\n                        volumeUSD: item.volumeUSD,\n                        feesCollected: item.feesCollected,\n                        txCount: item.txCount,\n                    };\n                }\n            });\n            return res;\n        }\n        return {\n            tvlUSD: data?.tvlUSD,\n            volumeUSD: data?.volumeUSD,\n            feesCollected: data?.feesCollected,\n            txCount: data?.txCount,\n        };\n    }, [data, poolsStat, pool]);\n\n    return (\n        <div>\n            <div className={\"total-stats-wrapper\"}>\n                <StatCard isLoading={isLoading} data={_data?.tvlUSD} title={t`Total Value Locked`} format style={\"ms_m-0 mxs_m-0\"} />\n                <StatCard isLoading={isLoading} data={_data?.volumeUSD} title={t`Volume 24H`} format style={\"ml-1 ms_m-0 mxs_m-0\"} />\n                <StatCard isLoading={isLoading} data={_data?.feesCollected} title={t`Fees Collected 24H`} format style={\"ml-1 ms_m-0 mxs_m-0\"} />\n                <StatCard isLoading={isLoading} data={_data?.txCount} title={t`Transactions 24H`} style={\"ml-1 ms_m-0 mxs_m-0\"} />\n            </div>\n        </div>\n    );\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport FeeChartRangeInput from \"../../components/FeeChartRangeInput\";\nimport PoolInfoChartToolbar from \"../../components/PoolInfoChartToolbar/PoolInfoChartToolbar\";\nimport { PoolInfoHeader } from \"./PoolInfoHeader\";\nimport { useInfoSubgraph } from \"../../hooks/subgraph/useInfoSubgraph\";\nimport { useInfoPoolChart } from \"../../hooks/useInfoPoolChart\";\nimport dayjs from \"dayjs\";\nimport Loader from \"../../components/Loader\";\nimport { useInfoTickData } from \"../../hooks/subgraph/useInfoTickData\";\nimport LiquidityBarChart from \"../../components/LiquidityBarChart\";\nimport { useToken } from \"../../hooks/Tokens\";\nimport { ChartSpan, ChartType } from \"../../models/enums\";\nimport { ChartToken } from \"../../models/enums/poolInfoPage\";\nimport \"./index.scss\";\nimport { InfoTotalStats } from \"../../components/InfoTotalStats\";\nimport { ArrowLeft } from \"react-feather\";\nimport { NavLink } from \"react-router-dom\";\nimport Card from \"../../shared/components/Card/Card\";\nimport { useActiveWeb3React } from \"hooks/web3\";\nimport { t, Trans } from \"@lingui/macro\";\n\ninterface PoolInfoPageProps {\n    totalStats: any;\n    fetchTotalStatsFn: any;\n    fetchInfoPoolsFn: any;\n    totalStatsLoading: any;\n    blocksFetched: any;\n    poolsResult: any;\n}\n\nexport default function PoolInfoPage({\n    totalStats,\n    fetchTotalStatsFn,\n    totalStatsLoading,\n    fetchInfoPoolsFn,\n    poolsResult,\n    blocksFetched,\n    match: {\n        params: { id },\n    },\n}: PoolInfoPageProps & RouteComponentProps<{ id?: string }>) {\n    const { account } = useActiveWeb3React();\n\n    const {\n        fetchPool: { fetchPoolFn, poolResult },\n    } = useInfoPoolChart();\n\n    const {\n        fetchChartFeesData: { feesResult, feesLoading, fetchFeePoolFn },\n        fetchChartPoolData: { chartPoolData, chartPoolDataLoading, fetchChartPoolDataFn },\n        // fetchPriceRangePositions: { positionsRange, fetchPriceRangePositionsFn },\n    } = useInfoSubgraph();\n\n    const {\n        fetchTicksSurroundingPrice: { ticksResult, ticksLoading, fetchTicksSurroundingPriceFn },\n    } = useInfoTickData();\n\n    const [span, setSpan] = useState(ChartSpan.DAY);\n    const [type, setType] = useState(ChartType.VOLUME);\n    const [token, setToken] = useState(ChartToken.TOKEN0);\n    const [selected, setSelected] = useState<string[]>([]);\n\n    useEffect(() => {\n        setSelected([]);\n    }, [account]);\n\n    const startTimestamp = useMemo(() => {\n        const day = dayjs();\n\n        switch (span) {\n            case ChartSpan.DAY:\n                return day.subtract(1, \"day\").unix();\n            case ChartSpan.WEEK:\n                return day.subtract(168 + day.hour(), \"hour\").unix();\n            case ChartSpan.MONTH:\n                if (day.month() === 2) {\n                    return day.subtract(31, \"day\").unix();\n                }\n                return day.subtract(30 * 24 + day.hour(), \"hour\").unix();\n        }\n    }, [span]);\n\n    const chartTypes = [\n        {\n            type: ChartType.VOLUME,\n            title: t`Volume`,\n        },\n        {\n            type: ChartType.TVL,\n            title: t`TVL`,\n        },\n        {\n            type: ChartType.FEES,\n            title: t`Pool fee`,\n        },\n        {\n            type: ChartType.LIQUIDITY,\n            title: t`Liquidity`,\n        },\n        {\n            type: ChartType.PRICE,\n            title: t`Price`,\n        },\n    ];\n\n    const chartSpans = [\n        {\n            type: ChartSpan.DAY,\n            title: t`Day`,\n        },\n        {\n            type: ChartSpan.WEEK,\n            title: t`Week`,\n        },\n        {\n            type: ChartSpan.MONTH,\n            title: t`Month`,\n        },\n    ];\n\n    useEffect(() => {\n        if (!id) return;\n\n        if (type === ChartType.FEES) {\n            fetchFeePoolFn(id, startTimestamp, Math.floor(new Date().getTime() / 1000));\n        } else if (type === ChartType.LIQUIDITY) {\n            fetchTicksSurroundingPriceFn(id);\n        } else {\n            fetchChartPoolDataFn(id, startTimestamp, Math.floor(new Date().getTime() / 1000));\n        }\n\n        // fetchPriceRangePositionsFn(id);\n    }, [span, type, account]);\n\n    useEffect(() => {\n        if (!id) return;\n\n        fetchPoolFn(id);\n    }, [id]);\n\n    const data = useMemo(() => {\n        if (type === ChartType.FEES) {\n            return feesResult;\n        } else if (type === ChartType.LIQUIDITY) {\n            return ticksResult;\n        } else {\n            return chartPoolData;\n        }\n    }, [feesResult, chartPoolData, ticksResult, account]);\n\n    const refreshing = useMemo(() => {\n        if (!feesLoading && !chartPoolDataLoading && !ticksLoading) return false;\n        return feesLoading || chartPoolDataLoading || ticksLoading;\n    }, [feesLoading, chartPoolDataLoading, ticksLoading]);\n\n    const _token0 = useToken(poolResult?.token0.id);\n    const _token1 = useToken(poolResult?.token1.id);\n\n    const [zoom, setZoom] = useState(5);\n\n    const MAX_ZOOM = 10;\n\n    const handleZoomIn = useCallback(() => {\n        if (zoom < MAX_ZOOM) {\n            setZoom(zoom + 1);\n        }\n    }, [zoom]);\n\n    const handleZoomOut = useCallback(() => {\n        if (zoom > 0) {\n            setZoom(zoom - 1);\n        }\n    }, [zoom]);\n\n    return (\n        <div className={\"mb-3\"}>\n            <NavLink className={\"f mb-1 c-p hover-op trans-op w-fc\"} to={\"/info/pools\"}>\n                <ArrowLeft className={\"mr-05\"} size={\"1rem\"} />\n                <span>\n                    <Trans>Back to pools table</Trans>\n                </span>\n            </NavLink>\n            {poolResult ? (\n                <Card classes={\"p-2 br-24 mxs_p-1\"}>\n                    <PoolInfoHeader\n                        token0={_token0 ?? undefined}\n                        token1={_token1 ?? undefined}\n                        fee={poolResult.fee}\n                        collectedFees={+poolResult.feesUSD < 1 ? poolResult.untrackedFeesUSD : poolResult.feesUSD}\n                    />\n                    <InfoTotalStats\n                        data={totalStats}\n                        refreshHandler={() => {\n                            fetchTotalStatsFn();\n                            fetchInfoPoolsFn();\n                        }}\n                        isLoading={totalStatsLoading}\n                        blocksFetched={blocksFetched}\n                        poolsStat={poolsResult}\n                    />\n                    <div className={\"info-chart-wrapper br-12 ph-1 pb-1 mt-1\"}>\n                        <div className={\"info-chart__toolbar\"}>\n                            <PoolInfoChartToolbar\n                                chartSpans={chartSpans}\n                                chartTypes={chartTypes}\n                                setType={setType}\n                                span={span}\n                                type={type}\n                                setSpan={setSpan}\n                                zoom={zoom}\n                                handleZoomIn={handleZoomIn}\n                                handleZoomOut={handleZoomOut}\n                            />\n                        </div>\n                        {type === ChartType.LIQUIDITY ? (\n                            <LiquidityBarChart\n                                //@ts-ignore\n                                data={data}\n                                token0={poolResult.token0.symbol}\n                                token1={poolResult.token1.symbol}\n                                refreshing={refreshing}\n                                zoom={zoom}\n                            />\n                        ) : (\n                            <FeeChartRangeInput\n                                //@ts-ignore\n                                fetchedData={data ?? undefined}\n                                refreshing={refreshing}\n                                id={id || \"\"}\n                                span={span}\n                                type={type}\n                                token={token}\n                                token0={_token0 ?? undefined}\n                                token1={_token1 ?? undefined}\n                                setToken={setToken}\n                                positions={{ closed: [], opened: [] }}\n                                selected={selected}\n                                setSelected={setSelected}\n                            />\n                        )}\n                    </div>\n                </Card>\n            ) : (\n                <div className={\"mock-loader\"}>\n                    <Loader stroke={\"var(--loader)\"} size={\"30px\"} />\n                </div>\n            )}\n        </div>\n    );\n}\n","import { useState } from 'react'\nimport { FETCH_POOL } from '../utils/graphql-queries'\nimport { useClients } from './subgraph/useClients'\nimport { PoolChartSubgraph, SubgraphResponse } from '../models/interfaces'\n\nexport function useInfoPoolChart() {\n\n    const { dataClient } = useClients()\n\n    const [poolLoading, setPoolLoading] = useState<boolean | null>(null)\n    const [poolResult, setPoolResult] = useState<null | PoolChartSubgraph>(null)\n\n    async function fetchPool(poolId: string) {\n        try {\n\n            setPoolLoading(true)\n\n            const { data: { pools }, error } = (await dataClient.query<SubgraphResponse<PoolChartSubgraph[]>>({\n                query: FETCH_POOL(),\n                variables: {poolId}\n            }))\n\n            if (error) throw new Error(`${error.name} ${error.message}`)\n\n            setPoolResult(pools[0])\n\n        } catch (err) {\n            console.error('fetching pool failed', err)\n            setPoolLoading(null)\n        }\n\n        setPoolLoading(false)\n    }\n\n    return {\n        fetchPool: { fetchPoolFn: fetchPool, poolLoading, poolResult }\n    }\n}\n","import { useState } from 'react'\nimport { FETCH_POOL, FETCH_TICKS } from '../../utils/graphql-queries'\nimport { useClients } from './useClients'\nimport keyBy from 'lodash.keyby'\nimport { TickMath, tickToPrice } from '@uniswap/v3-sdk'\nimport { Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { ActiveTick, FormattedTick, Liquidity, SmallPoolSubgraph, SubgraphResponse } from '../../models/interfaces'\n\nexport function useInfoTickData() {\n    const { dataClient } = useClients()\n    const numSurroundingTicks = 300\n    const PRICE_FIXED_DIGITS = 8\n\n    const [ticksResult, setTicksResult] = useState<null | FormattedTick>(null)\n    const [ticksLoading, setTicksLoading] = useState<boolean>(false)\n\n    async function fetchInitializedTicks(poolAddress: string, tickIdxLowerBound: number, tickIdxUpperBound: number) {\n\n        let surroundingTicks: any[] = []\n        let surroundingTicksResult: Liquidity[] = []\n\n        let skip = 0\n        do {\n            const { data, error, loading } = await dataClient.query<SubgraphResponse<Liquidity[]>>({\n                query: FETCH_TICKS(),\n                fetchPolicy: 'cache-first',\n                variables: {\n                    poolAddress,\n                    tickIdxLowerBound,\n                    tickIdxUpperBound,\n                    skip\n                }\n            })\n\n            if (loading) {\n                continue\n            }\n\n            if (error) {\n                return { error: Boolean(error), loading, ticks: surroundingTicksResult }\n            }\n\n            surroundingTicks = data.ticks\n            surroundingTicksResult = surroundingTicksResult.concat(surroundingTicks)\n            skip += 1000\n        } while (surroundingTicks.length > 0)\n\n        return { ticks: surroundingTicksResult, loading: false, error: false }\n    }\n\n    //@ts-ignore\n    async function fetchTicksSurroundingPrice(poolId: string) {\n\n        setTicksLoading(true)\n\n        try {\n\n            const { data: { pools }, error } = await dataClient.query<SubgraphResponse<SmallPoolSubgraph[]>>({\n                query: FETCH_POOL(),\n                variables: { poolId }\n            })\n\n            if (error) return\n\n            const {\n                tick: poolCurrentTick,\n                liquidity,\n                token0: { id: token0Address, decimals: token0Decimals },\n                token1: { id: token1Address, decimals: token1Decimals }\n            } = pools[0]\n\n            const poolCurrentTickIdx = parseInt(poolCurrentTick)\n            const tickSpacing = 60\n\n            const activeTickIdx = Math.floor(poolCurrentTickIdx / tickSpacing) * tickSpacing\n\n            const tickIdxLowerBound = activeTickIdx - numSurroundingTicks * tickSpacing\n            const tickIdxUpperBound = activeTickIdx + numSurroundingTicks * tickSpacing\n\n            const initializedTicksResult = await fetchInitializedTicks(poolId, tickIdxLowerBound, tickIdxUpperBound)\n            if (initializedTicksResult.error || initializedTicksResult.loading) {\n                return {\n                    error: initializedTicksResult.error,\n                    loading: initializedTicksResult.loading\n                }\n            }\n\n            const { ticks: initializedTicks } = initializedTicksResult\n\n            const tickIdxToInitializedTick = keyBy(initializedTicks, 'tickIdx')\n\n            const token0 = new Token(1, token0Address, parseInt(token0Decimals))\n            const token1 = new Token(1, token1Address, parseInt(token1Decimals))\n\n            let activeTickIdxForPrice = activeTickIdx\n            if (activeTickIdxForPrice < TickMath.MIN_TICK) {\n                activeTickIdxForPrice = TickMath.MIN_TICK\n            }\n            if (activeTickIdxForPrice > TickMath.MAX_TICK) {\n                activeTickIdxForPrice = TickMath.MAX_TICK\n            }\n\n            const activeTickProcessed = {\n                liquidityActive: JSBI.BigInt(liquidity),\n                tickIdx: activeTickIdx,\n                liquidityNet: JSBI.BigInt(0),\n                price0: tickToPrice(token0, token1, activeTickIdxForPrice).toFixed(PRICE_FIXED_DIGITS),\n                price1: tickToPrice(token1, token0, activeTickIdxForPrice).toFixed(PRICE_FIXED_DIGITS),\n                liquidityGross: JSBI.BigInt(0)\n            }\n\n            const activeTick = tickIdxToInitializedTick[activeTickIdx]\n            if (activeTick) {\n                activeTickProcessed.liquidityGross = JSBI.BigInt(activeTick.liquidityGross)\n                activeTickProcessed.liquidityNet = JSBI.BigInt(activeTick.liquidityNet)\n            }\n\n            enum Direction {\n                ASC,\n                DESC,\n            }\n\n            // Computes the numSurroundingTicks above or below the active tick.\n            const computeSurroundingTicks = (\n                activeTickProcessed: ActiveTick,\n                tickSpacing: number,\n                numSurroundingTicks: number,\n                direction: Direction\n            ) => {\n                let previousTickProcessed = {\n                    ...activeTickProcessed\n                }\n\n                // Iterate outwards (either up or down depending on 'Direction') from the active tick,\n                // building active liquidity for every tick.\n                let processedTicks: any[] = []\n                for (let i = 0; i < numSurroundingTicks; i++) {\n                    const currentTickIdx =\n                        direction == Direction.ASC\n                            ? previousTickProcessed.tickIdx + tickSpacing\n                            : previousTickProcessed.tickIdx - tickSpacing\n\n                    if (currentTickIdx < TickMath.MIN_TICK || currentTickIdx > TickMath.MAX_TICK) {\n                        break\n                    }\n\n                    const currentTickProcessed: ActiveTick = {\n                        liquidityActive: previousTickProcessed.liquidityActive,\n                        tickIdx: currentTickIdx,\n                        liquidityNet: JSBI.BigInt(0),\n                        price0: tickToPrice(token0, token1, currentTickIdx).toFixed(PRICE_FIXED_DIGITS),\n                        price1: tickToPrice(token1, token0, currentTickIdx).toFixed(PRICE_FIXED_DIGITS),\n                        liquidityGross: JSBI.BigInt(0)\n                    }\n\n                    const currentInitializedTick = tickIdxToInitializedTick[currentTickIdx.toString()]\n                    if (currentInitializedTick) {\n                        currentTickProcessed.liquidityGross = JSBI.BigInt(currentInitializedTick.liquidityGross)\n                        currentTickProcessed.liquidityNet = JSBI.BigInt(currentInitializedTick.liquidityNet)\n                    }\n\n                    if (direction == Direction.ASC && currentInitializedTick) {\n                        currentTickProcessed.liquidityActive = JSBI.add(\n                            previousTickProcessed.liquidityActive,\n                            JSBI.BigInt(currentInitializedTick.liquidityNet)\n                        )\n                    } else if (direction == Direction.DESC && JSBI.notEqual(previousTickProcessed.liquidityNet, JSBI.BigInt(0))) {\n                        currentTickProcessed.liquidityActive = JSBI.subtract(\n                            previousTickProcessed.liquidityActive,\n                            previousTickProcessed.liquidityNet\n                        )\n                    }\n\n                    processedTicks.push(currentTickProcessed)\n                    previousTickProcessed = currentTickProcessed\n                }\n\n                if (direction == Direction.DESC) {\n                    processedTicks = processedTicks.reverse()\n                }\n\n                return processedTicks\n            }\n\n            const subsequentTicks = computeSurroundingTicks(\n                activeTickProcessed,\n                tickSpacing,\n                numSurroundingTicks,\n                Direction.ASC\n            )\n\n            const previousTicks = computeSurroundingTicks(\n                activeTickProcessed,\n                tickSpacing,\n                numSurroundingTicks,\n                Direction.DESC\n            )\n\n            const ticksProcessed = previousTicks.concat(activeTickProcessed).concat(subsequentTicks)\n\n            setTicksResult({\n                ticksProcessed,\n                tickSpacing,\n                activeTickIdx,\n                token0,\n                token1\n            })\n        } catch (err: any) {\n            throw new Error(err)\n        } finally {\n            setTicksLoading(false)\n        }\n    }\n\n    return {\n        fetchTicksSurroundingPrice: {\n            ticksResult,\n            ticksLoading,\n            fetchTicksSurroundingPriceFn: fetchTicksSurroundingPrice\n        }\n    }\n}\n","import { Helmet } from \"react-helmet\";\nimport { useEffect, useCallback } from \"react\";\nimport { Redirect, Route, Switch, useRouteMatch } from \"react-router\";\nimport { useInfoSubgraph } from \"../../hooks/subgraph/useInfoSubgraph\";\nimport { InfoPools } from \"../../components/InfoPools\";\nimport { InfoTokens } from \"../../components/InfoTokens\";\nimport PoolInfoPage from \"../PoolInfoPage\";\nimport { InfoTotalStats } from \"../../components/InfoTotalStats\";\nimport Card from \"../../shared/components/Card/Card\";\nimport Menu from \"../../components/Menu\";\nimport { Grid, RefreshCw, StopCircle } from \"react-feather\";\nimport \"./index.scss\";\n\nimport { t, Trans } from \"@lingui/macro\";\nimport { EthereumWindow } from \"models/types\";\n\nfunction InfoPage() {\n    const { path } = useRouteMatch();\n    const {\n        fetchInfoPools: { poolsLoading, fetchInfoPoolsFn, poolsResult },\n        fetchInfoTokens: { tokensLoading, fetchInfoTokensFn, tokensResult },\n        fetchTotalStats: { totalStats, fetchTotalStatsFn, totalStatsLoading },\n        blocksFetched,\n    } = useInfoSubgraph() || {};\n\n    const infoMenuList = [\n        {\n            title: t`Pools`,\n            icon: <Grid size={18} />,\n            link: \"/info/pools\",\n        },\n        {\n            title: t`Tokens`,\n            icon: <StopCircle size={18} />,\n            link: \"/info/tokens\",\n        },\n    ];\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    useEffect(() => {\n        const _window = window as EthereumWindow;\n\n        if (!_window.ethereum) return;\n\n        _window.ethereum.on(\"accountsChanged\", reload);\n        return () => _window.ethereum.removeListener(\"accountsChanged\", reload);\n    }, []);\n\n    return (\n        <>\n            <Helmet>\n                <title>{t`LitX — Info`}</title>\n            </Helmet>\n            <div className={\"w-100 maw-1180\"}>\n                <Switch>\n                    <Route exact path={`${path}`}>\n                        <Redirect to={`${path}/pools`} />\n                    </Route>\n                    <Route exact path={`${path}/pools`}>\n                        <Helmet>\n                            <title>{t`LitX — Info • Pools`}</title>\n                        </Helmet>\n                        <Card classes={\"br-24 pa-2 mb-1 w-100 mxs_p-1\"}>\n                            <div className={\"info-page-menu mb-1\"}>\n                                <Menu items={infoMenuList} refreshHandler={() => (blocksFetched ? fetchInfoPoolsFn() : undefined)} isLoading={poolsLoading} classes={\"fs-125\"} size={\"17px\"} />\n                            </div>\n                            <InfoTotalStats\n                                data={totalStats}\n                                refreshHandler={() => {\n                                    fetchTotalStatsFn();\n                                    fetchInfoPoolsFn();\n                                }}\n                                isLoading={totalStatsLoading}\n                                blocksFetched={blocksFetched}\n                                poolsStat={poolsResult}\n                            />\n                        </Card>\n                        <Card classes={\"br-24 pa-2\"}>\n                            <InfoPools data={poolsResult} refreshing={Boolean(poolsLoading)} fetchHandler={() => fetchInfoPoolsFn()} blocksFetched={blocksFetched} />\n                        </Card>\n                    </Route>\n                    <Route\n                        exact\n                        path={`${path}/pools/:id`}\n                        render={(e) => (\n                            <PoolInfoPage\n                                {...e}\n                                fetchTotalStatsFn={fetchInfoPoolsFn}\n                                fetchInfoPoolsFn={fetchInfoPoolsFn}\n                                blocksFetched={blocksFetched}\n                                totalStatsLoading={totalStatsLoading}\n                                poolsResult={poolsResult}\n                                totalStats={totalStats}\n                            />\n                        )}\n                    />\n                    <Route exact path={`${path}/tokens`}>\n                        <Helmet>\n                            <title>{t`LitX — Info • Tokens`}</title>\n                        </Helmet>\n                        <Card classes={\"br-24 pa-2 mb-1 mxs_p-1\"}>\n                            <div className={\"info-page-menu mb-1\"}>\n                                <Menu items={infoMenuList} refreshHandler={() => (blocksFetched ? fetchInfoTokensFn() : undefined)} isLoading={tokensLoading} classes={\"fs-125\"} size={\"17px\"} />\n                            </div>\n                            <InfoTotalStats\n                                data={totalStats}\n                                refreshHandler={() => {\n                                    fetchTotalStatsFn();\n                                    fetchInfoPoolsFn();\n                                }}\n                                isLoading={totalStatsLoading}\n                                blocksFetched={blocksFetched}\n                                poolsStat={poolsResult}\n                            />\n                        </Card>\n                        <Card classes={\"br-24 pa-2 mb-3\"}>\n                            <InfoTokens data={tokensResult} refreshing={Boolean(tokensLoading)} fetchHandler={() => fetchInfoTokensFn()} blocksFetched={blocksFetched} />\n                        </Card>\n                    </Route>\n                </Switch>\n            </div>\n        </>\n    );\n}\n\nexport default InfoPage;\n"],"sourceRoot":""}