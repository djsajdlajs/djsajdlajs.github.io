{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../node_modules/bignumber.js/bignumber.js","en-US.js","formatting.js","globalState.js","loading.js","manipulating.js","numbro.js","parsing.js","unformatting.js","validating.js","../node_modules/react-feather/dist/icons/refresh-cw.js"],"names":["isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","i","j","r","s","z","xc","yc","k","l","a","b","n","e","str","len","BigNumber","pow2_53","random53bitInt","decimal","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","x","v","intCheck","alphabet","caseChanged","isNum","arrL","arr","carry","klo","khi","temp","xlo","m","xhi","cmp","c0","ne","toExponential","toFixedPoint","method","pows10","out","rd","ni","d","rm","sd","obj","crypto","EXPONENTIAL_AT","RANGE","c","rand","dp","args","sum","convertBase","y","div","yL","qc","q","base","more","xL","xi","remL","rem","yz","yc0","rem0","prodL","prod","subtract","round","parseNumeric","this","nIsBig","nIsNeg","isModExp","nIsOdd","half","ye","xe","t","xLTy","reverse","normalise","xcL","ycL","zc","sqrtBase","ylo","yhi","length","slice","rep","format","g1","g2","intPart","fractionPart","isNeg","intDigits","isInteger","n1","d1","md","exp","n0","d2","d0","module","globalObject","exports","languageTag","delimiters","thousands","abbreviations","thousand","million","billion","trillion","spaceSeparated","ordinal","number","bytes","binarySuffixes","decimalSuffixes","currency","symbol","position","code","currencyFormat","thousandSeparated","totalLength","spaceSeparatedCurrency","formats","fourDigits","fullWithTwoDecimals","output","mantissa","fullWithTwoDecimalsNoCurrency","fullWithNoDecimals","globalState","require","validating","parsing","powers","Math","pow","defaultOptions","characteristic","forceAverage","average","optionalMantissa","negative","forceSign","roundingFunction","spaceSeparatedAbbreviation","currentBytes","general","scale","suffixes","marker","binary","_format","instance","providedFormat","numbro","parseFormat","validateFormat","postfix","state","currentCurrency","clonedFormat","Object","assign","options","space","currencyPosition","currencySymbol","lowPrecision","formatNumber","_value","formatOrDefault","currentCurrencyDefaultFormat","prefixSymbol","currentPercentageDefaultFormat","_state$currentBytes","localBinarySuffixes","localDecimalSuffixes","baseInfo","getFormatByteUnits","value","defaults","currentByteDefaultFormat","currentTimeDefaultFormat","hours","floor","minutes","seconds","ordinalFn","currentOrdinal","currentOrdinalDefaultFormat","abs","power","min","max","zeroes","result","toFixed","precision","toString","indexOf","_result$split2","split","substr","replaceDelimiters","currentDelimiters","thousandSeparator","thousandsSize","hasNegativeSign","counter","unshift","forEach","index","currentDefaults","hasZeroFormat","getZeroFormat","isFinite","_ref2","_ref2$characteristicP","characteristicPrecision","numberString","exponential","optionalCharacteristic","mantissaPrecision","trimMantissa","abbreviation","data","isNegative","characteristicLength","currentAbbreviations","_data","trim","_result$toString$spli2","currentCharacteristic","currentMantissa","match","hasTrailingZeroes","_result$toString$spli5","replace","missingZeros","defaultFormat","keys","apply","getByteUnit","getBinaryByteUnit","getDecimalByteUnit","enUS","currentLanguageTag","languages","zeroFormat","globalDefaults","chooseLanguage","tag","currentLanguageData","currentLanguage","ordinalFormat","byteFormat","percentageFormat","timeFormat","setDefaults","setZeroFormat","string","languageData","Error","registerLanguage","useLanguage","validateLanguage","setLanguage","fallbackTag","matchingLanguageTag","find","each","loadLanguagesInNode","tags","console","error","_subtract","other","otherValue","isNumbro","minus","toNumber","add","plus","multiply","times","divide","dividedBy","set","difference","clone","validator","loader","unformatter","formatter","manipulate","Numbro","_classCallCheck","input","normalizeInput","unformat","isNaN","NaN","version","object","language","defaultCurrencyFormat","validate","allSuffixes","key","factor","escapeRegExp","unformatValue","inputString","computeUnformattedValue","stripped","newInput","RegExp","possibleOrdinalValue","parseFloat","ordinalString","inversedAbbreviations","abbreviationValues","sort","numberOfAbbreviations","_i","segments","bcp47RegExp","validFormat","type","validValues","restriction","message","mandatory","restrictions","children","validLanguage","timeDefaults","validateInput","validateSpec","toValidate","spec","skipMandatoryCheck","results","map","_typeof","JSON","stringify","push","_toConsumableArray","reduce","acc","current","validInput","isFormatValid","_extends","target","arguments","source","prototype","hasOwnProperty","call","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","RefreshCw","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","propTypes","PropTypes","oneOfType","displayName"],"mappings":"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","file":"static/js/0.b495f82e.chunk.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    bytes: {\n        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true,\n        spaceSeparatedCurrency: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\nconst BigNumber = require(\"bignumber.js\");\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision = 0 }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    const n = new BigNumber(roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision)));\n    return n.toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language bytes data\n *\n * @return {{}}\n */\nstate.currentBytes = () => currentLanguageData().bytes || {};\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * First use the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * First use the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * First use the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * First use the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * First use the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.3.6\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nmodule.exports = numbro;\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n","/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    lowPrecision: {\n        type: \"boolean\",\n        restriction: (number, format) => format.average === true,\n        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n    },\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    roundingFunction: \"function\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    spaceSeparatedAbbreviation: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    spaceSeparatedCurrency: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    bytes: {\n        type: \"object\",\n        children: {\n            binarySuffixes: \"object\",\n            decimalSuffixes: \"object\"\n        }\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return value !== undefined;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar RefreshCw = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"23 4 23 10 17 10\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"1 20 1 14 7 14\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15\"\n  }));\n});\nRefreshCw.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nRefreshCw.displayName = 'RefreshCw';\nexport default RefreshCw;"],"sourceRoot":""}